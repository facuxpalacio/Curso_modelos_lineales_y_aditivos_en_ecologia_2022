# Intercepto + "smooth" aleatorios
gamm3 <- gam(Sources ~ Year + s(Station, SampleDepth, bs = "fs"), family = gaussian, data = biolum)
AIC(gam0, gamm1, gamm2, gamm3)
summary(gamm3)
plot_smooth(gamm2, view = "SampleDepth", plot_all = "Year", rm.ranef = TRUE)
gamm3 <- bam(Sources ~ Year + s(Station, SampleDepth, bs = "fs"), family = gaussian, data = biolum)
summary(gamm3)
plot_smooth(gamm2, view = "SampleDepth", plot_all = "Year", rm.ranef = TRUE)
gamm3 <- gam(Sources ~ s(Station, SampleDepth, bs = "fs"), family = gaussian, data = biolum)
summary(gamm3)
gamm3 <- gam(Sources ~ Year + s(Station, SampleDepth, bs = "fs", k = 10), family = gaussian, data = biolum)
gamm3 <- gam(Sources ~ Year + s(Station, SampleDepth, bs = "fs"), family = gaussian, method = "REML", data = biolum)
summary(gamm3)
gamm3 <- gam(Sources ~ s(Station, SampleDepth, bs = "fs"), family = gaussian, method = "REML", data = biolum)
summary(gamm3)
gamm3 <- gam(Sources ~ Year + s(Station, SampleDepth, bs = "fs", k = 10), family = gaussian, method = "REML", data = biolum)
summary(gamm3)
gamm3 <- gam(Sources ~ Year + s(Station, SampleDepth, bs = "fs", m = 1), family = gaussian, method = "REML", data = biolum)
summary(gamm3)
summary(gam1)
summary(gamm2)
gamm2 <- gam(Sources ~ Year + s(SampleDepth, Station, bs = "re"), family = gaussian, data = biolum)
summary(gamm2)
gamm2 <- gam(Sources ~ Year + s(Station, bs = "re") + s(SampleDepth, Station, bs = "re"), family = gaussian, data = biolum)
summary(gamm2)
gam1 <- gam(Sources ~ Year + s(SampleDepth) + s(Station, bs = "re"), family = gaussian, data = biolum)
# Intercepto + pendiente aleatorios
gamm2 <- gam(Sources ~ Year + s(Station, bs = "re") + s(SampleDepth, Station, bs = "re"), family = gaussian, data = biolum)
# Intercepto + "smooth" aleatorios
gamm3 <- gam(Sources ~ Year + s(SampleDepth, Station, bs = "fs", m = 1), family = gaussian, method = "REML", data = biolum)
AIC(gam0, gamm1, gamm2, gamm3)
plot_smooth(gamm2, view = "SampleDepth", plot_all = "Year", rm.ranef = TRUE)
plot_parametric(gamm2, pred = list(Year = c("2001", "2002")), rm.ranef = TRUE)
plot_smooth(gamm2, view = "SampleDepth", plot_all = "Year", rm.ranef = TRUE)
summary(gamm2)
plot(gamm2)
plot_smooth(gamm1, view = "SampleDepth", plot_all = "Year", rm.ranef = TRUE)
plot_smooth(gamm1, view = "SampleDepth")
gam0 <- gam(Sources ~ Year + s(SampleDepth), family = gaussian, data = biolum)
biolum <- read.table("C:/RD/ISIT.txt", header = TRUE)
biolum$Station <- as.factor(biolum$Station)
biolum$Year <- as.factor(biolum$Year)
gam0 <- gam(Sources ~ Year + s(SampleDepth), family = gaussian, data = biolum)
plot(gam0)
gam1 <- gam(Sources ~ Year + s(SampleDepth) + s(Station, bs = "re"), family = gaussian, data = biolum)
plot(gam1)
gamm2 <- gam(Sources ~ Year + s(Station, bs = "re") + s(SampleDepth, Station, bs = "re"), family = gaussian, data = biolum)
plot(gamm2)
gamm3 <- gam(Sources ~ Year + s(SampleDepth, Station, bs = "fs", m = 1), family = gaussian, method = "REML", data = biolum)
gamm3 <- gam(Sources ~ Year + s(SampleDepth, Station, bs = "fs", m = 1), family = gaussian, method = "REML", data = biolum)
AIC(gam0, gamm1, gamm2, gamm3)
gamm1 <- gam(Sources ~ Year + s(SampleDepth) + s(Station, bs = "re"), family = gaussian, data = biolum)
AIC(gam0, gamm1, gamm2, gamm3)
summary(gamm3)
plot_smooth(gamm1, view = "SampleDepth", plot_all = "Year", rm.ranef = TRUE)
plot_smooth(gamm2, view = "SampleDepth", plot_all = "Year", rm.ranef = TRUE)
gamm2 <- gam(Sources ~ Year + s(Station, bs = "re") + s(Station, SampleDepth, bs = "re"), family = gaussian, data = biolum)
plot_smooth(gamm2, view = "SampleDepth", plot_all = "Year", rm.ranef = TRUE)
biolum <- read.table("C:/RD/ISIT.txt", header = TRUE)
gamm2 <- gam(Sources ~ Year + s(Station, bs = "re") + s(Station, SampleDepth, bs = "re"), family = gaussian, data = biolum)
plot_smooth(gamm2, view = "SampleDepth", plot_all = "Year", rm.ranef = TRUE)
biolum$Station <- as.factor(biolum$Station)
gamm2 <- gam(Sources ~ Year + s(Station, bs = "re") + s(SampleDepth, Station, bs = "re"), family = gaussian, data = biolum)
plot_smooth(gamm2, view = "SampleDepth", plot_all = "Year", rm.ranef = TRUE)
biolum <- read.table("C:/RD/ISIT.txt", header = TRUE)
biolum$Station <- as.factor(biolum$Station)
biolum$Year <- as.factor(biolum$Year)
gamm1 <- gam(Sources ~ Year + s(SampleDepth) + s(Station, bs = "re"), family = gaussian, data = biolum)
# Intercepto + pendiente aleatorios
gamm2 <- gam(Sources ~ Year + s(Station, bs = "re") + s(SampleDepth, Station, bs = "re"), family = gaussian, data = biolum)
# Intercepto + "smooth" aleatorios
gamm3 <- gam(Sources ~ Year + s(SampleDepth, Station, bs = "fs", m = 1), family = gaussian, method = "REML", data = biolum)
AIC(gam0, gamm1, gamm2, gamm3)
plot_smooth(gamm1, view = "SampleDepth", plot_all = "Year", rm.ranef = TRUE)
plot_parametric(gamm1, pred = list(Year = c("2001", "2002")), rm.ranef = TRUE)
plot_smooth(gamm1, view = "SampleDepth", cond = list(Year = "2001", Station = 3), col = "red", ylim = c(-10, 50))
plot_smooth(gamm1, view = "SampleDepth", cond = list(Year = "2001", Station = 16), col = "blue", add = TRUE) # Agregar estación 15
plot_smooth(gamm1, view = "SampleDepth", cond = list(Year = "2001", Station = 3), col = "red", ylim = c(-10, 50))
plot_smooth(gamm1, view = "SampleDepth", cond = list(Year = "2001", Station = 16), col = "blue", add = TRUE)
str(biolum)
gam0 <- gam(Sources ~ Year + s(SampleDepth), family = gaussian, data = biolum)
plot(gam0)
# Intercepto aleatorio
gamm1 <- gam(Sources ~ Year + s(SampleDepth) + s(Station, bs = "re"), family = gaussian, data = biolum)
# Intercepto + pendiente aleatorios
gamm2 <- gam(Sources ~ Year + s(Station, bs = "re") + s(SampleDepth, Station, bs = "re"), family = gaussian, data = biolum)
# Intercepto + "smooth" aleatorios
gamm3 <- gam(Sources ~ Year + s(SampleDepth, Station, bs = "fs", m = 1), family = gaussian, method = "REML", data = biolum)
# Comparación de estructuras de efectos aleatorios
AIC(gam0, gamm1, gamm2, gamm3)
plot_smooth(gamm1, view = "SampleDepth", cond = list(Year = "2001", Station = "3"), col = "red", ylim = c(-10, 50))
plot_smooth(gamm1, view = "SampleDepth", cond = list(Year = "2001", Station = "16"), col = "blue", add = TRUE) # Agregar estación 16
plot_smooth(gamm2, view = "SampleDepth", cond = list(Year = "2001", Station = "3"), col = "red", ylim = c(-10, 50))
plot_smooth(gamm2, view = "SampleDepth", cond = list(Year = "2001", Station = "16"), col = "blue", add = TRUE) # Agregar estación 16
plot_smooth(gamm3, view = "SampleDepth", cond = list(Year = "2001", Station = "3"), col = "red", ylim = c(-10, 50))
gam0 <- gam(Sources ~ Year + s(SampleDepth) + s(SampleDepth, by = Year), family = gaussian, data = biolum)
summary(gam0)
gamm1 <- gam(Sources ~ Year + s(SampleDepth) + s(SampleDepth, by = Year) + s(Station, bs = "re"), family = gaussian, data = biolum)
gam0 <- gam(Sources ~ Year + s(SampleDepth) + s(SampleDepth, by = Year), family = gaussian, data = biolum)
biolum <- read.table("C:/RD/ISIT.txt", header = TRUE)
biolum$Station <- as.factor(biolum$Station)
gam0 <- gam(Sources ~ Year + s(SampleDepth) + s(SampleDepth, by = Year), family = gaussian, data = biolum)
gamm1 <- gam(Sources ~ Year + s(SampleDepth) + s(Station, bs = "re"), family = gaussian, data = biolum)
gamm2 <- gam(Sources ~ Year +  s(SampleDepth) +
s(Station, bs = "re") + # Intercepto aleatorio
s(SampleDepth, Station, bs = "re"), # Pendiente aleatoria
family = gaussian, data = biolum)
gamm3 <- gam(Sources ~ Year + s(SampleDepth) +
s(SampleDepth, Station, bs = "fs"), # Smooth aleatorio
family = gaussian, method = "REML", data = biolum)
AIC(gam0, gamm1, gamm2, gamm3)
summary(gamm3)
gamm3 <- gam(Sources ~ Year + s(SampleDepth, Station, bs = "fs"), # Smooth aleatorio
family = gaussian, method = "REML", data = biolum)
summary(gamm3)
summary(gamm2)
gamm3 <- gam(Sources ~ Year + s(SampleDepth, by = Year) + s(SampleDepth, Station, bs = "fs"), # Smooth aleatorio
family = gaussian, method = "REML", data = biolum)
summary(gamm3)
AIC(gam0, gamm1, gamm2)
5084.019-4914.159
plot_smooth(gamm2, view = "SampleDepth", plot_all = "Year", rm.ranef = TRUE)
str(biolum)
biolum$Station <- as.factor(biolum$Station)
biolum$Year <- as.factor(biolum$Year)
gam0 <- gam(Sources ~ Year + s(SampleDepth) + s(SampleDepth, by = Year), family = gaussian, data = biolum)
plot(gam0)
gamm1 <- gam(Sources ~ Year + s(SampleDepth) + s(Station, bs = "re"), family = gaussian, data = biolum)
# Intercepto + pendiente aleatorios
gamm2 <- gam(Sources ~ Year +  s(SampleDepth) +
s(Station, bs = "re") + # Intercepto aleatorio
s(SampleDepth, Station, bs = "re"), # Pendiente aleatoria
family = gaussian, data = biolum)
# Intercepto + "smooth" aleatorios
gamm3 <- gam(Sources ~ Year + s(SampleDepth, Station, bs = "fs"), # Smooth aleatorio
family = gaussian, method = "REML", data = biolum)
summary(gamm3)
AIC(gam0, gamm1, gamm2, gamm3)
plot_smooth(gamm3, view = "SampleDepth", plot_all = "Year", rm.ranef = TRUE)
AIC(gam0, gamm1, gamm2)
plot_smooth(gamm2, view = "SampleDepth", plot_all = "Year", rm.ranef = TRUE)
plot_parametric(gamm2, pred = list(Year = c("2001", "2002")), rm.ranef = TRUE)
plot_smooth(gamm2, view = "SampleDepth", cond = list(Year = "2001", Station = "3"), col = "red", ylim = c(-10, 50))
plot_smooth(gamm1, view = "SampleDepth", cond = list(Year = "2001", Station = "16"), col = "blue", add = TRUE) # Agregar estación 16
plot(gamm1,select=3)
plot(gamm3,select=3)
check_resid(gamm2, split_by = "Station")
?check_resid
check_resid(gamm2, split_pred = "Station")
acf_resid(gamm2, split_pred = "Station")
compareML(gam0, gamm1, gamm2)
plot(gamm2)
plot(gamm2, select=2)
gamm3 <- gam(Sources ~ Year + s(SampleDepth, Station, bs = "fs", k = 10), # Smooth aleatorio
family = gaussian, method = "REML", data = biolum)
summary(gamm3)
gamm3 <- gam(Sources ~ Year + s(SampleDepth, Station, bs = "fs", m = 1, k = 5), # Smooth aleatorio
family = gaussian, data = biolum)
summary(gamm3)
gamm3 <- gam(Sources ~ Year + s(SampleDepth, Station, bs = "fs", m = 1), # Smooth aleatorio
family = gaussian, data = biolum)
summary(gamm3)
gamm3 <- gam(Sources ~ Year + s(SampleDepth, Station, bs = "fs", k = 10), # Smooth aleatorio
family = gaussian, data = biolum)
summary(gamm3)
gamm3 <- gam(Sources ~ Year + s(SampleDepth, Station, bs = "fs", m = 1), # Smooth aleatorio
family = gaussian, data = biolum)
summary(gamm3)
gamm3 <- gam(Sources ~ Year + s(SampleDepth, Station, bs = "fs", k = 5), # Smooth aleatorio
family = gaussian, data = biolum)
summary(gamm3)
gamm3 <- gam(Sources ~ Year + s(SampleDepth, Station, bs = "fs", m = 1, k = 5), # Smooth aleatorio
family = gaussian, data = biolum)
AIC(gam0, gamm1, gamm2, gamm3)
check_resid(gamm3, split_pred = "Station")
plot_smooth(gamm3, view = "SampleDepth", plot_all = "Year", rm.ranef = TRUE)
plot_parametric(gamm3, pred = list(Year = c("2001", "2002")), rm.ranef = TRUE)
plot_smooth(gamm3, view = "SampleDepth", cond = list(Year = "2001", Station = "3"), col = "red", ylim = c(-10, 50))
library(rpart)
library(caret)
library(rattle)
carde <- read.table("C:/RD/capturas carde morfo.txt", head = T)
carde$sex <- as.factor(carde$sex)
carde.cap <- subset(carde, ori == "captura")
tree <- rpart(sex ~ bri + cro + hue + pes + cul + ala + tar,
data = train.data, control = rpart.control(cp = 0.0001))
ntrain <- round(0.8*nrow(carde.cap), 0)
set.seed(1001)
ntrain <- round(0.8*nrow(carde.cap), 0)
ntest <- nrow(carde.cap) - ntrain
train <- sample(1:nrow(carde.cap), size = ntrain, replace = F)
train.data <- carde.cap[train, ]
test.data <- carde.cap[-train, ]
tree <- rpart(sex ~ bri + cro + hue + pes + cul + ala + tar,
data = train.data, control = rpart.control(cp = 0.0001))
tree
printcp(tree)
best <- tree$cptable[which.min(tree$cptable[, "xerror"]), "CP"]
best
tree <- rpart(sex ~ bri + cro + hue + pes + cul + ala + tar,
data = carde.cap, control = rpart.control(cp = 0.0001))
printcp(tree)
best <- tree$cptable[which.min(tree$cptable[, "xerror"]), "CP"]
pruned_tree <- prune(tree, cp = best)
fancyRpartPlot(tree)
fancyRpartPlot(pruned_tree)
install.packages("randomForestExplainer")
library(randomForestExplainer)
?randomForest
library(randomForest)
?randomForest
rf.cap <- randomForest(sex ~ bri + cro + hue + pes + cul + ala + tar,
data = train.data, importance = T)
rf.cap
?min_depth_distribution
importance_frame <- measure_importance(rf.cap)
importance_frame
?partialPlot
partialPlot(rf.cap)
partialPlot(rf.cap, xvar = "ala")
partialPlot(rf.cap, x.var = "ala")
partialPlot(rf.cap, x.var = "ala", pred.data = train.data)
partialPlot(rf.cap, x.var = "bri", pred.data = train.data)
varImpPlot(rf.cap)
partialPlot(rf.cap, x.var = "tarso", pred.data = train.data)
partialPlot(rf.cap, x.var = "tar", pred.data = train.data)
partialPlot(rf.cap, x.var = "hue", pred.data = train.data)
rf.cap <- randomForest(sex ~ bri + cro + hue + pes + cul + ala + tar,
data = carde.cap, importance = T)
importance(rf.cap)
varImpPlot(rf.cap)
rf.cap <- randomForest(sex ~ bri + cro + hue + pes + cul + ala + tar,
data = carde.cap, ntree = 1000, importance = T)
carde <- read.table("C:/RD/capturas carde morfo.txt", head = T)
carde$sex <- as.factor(carde$sex)
carde.cap <- subset(carde, ori == "captura")
rf.cap <- randomForest(sex ~ bri + cro + hue + pes + cul + ala + tar,
data = carde.cap, ntree = 1000, importance = T)
set.seed(1001)
rf.cap
varImpPlot(rf.cap)
set.seed(1001)
ntrain <- round(0.8*nrow(carde.cap), 0)
ntest <- nrow(carde.cap) - ntrain
train <- sample(1:nrow(carde.cap), size = ntrain, replace = F)
train.data <- carde.cap[train, ]
test.data <- carde.cap[-train, ]
rf.cap.train <- randomForest(sex ~ bri + cro + hue + pes + cul + ala + tar,
data = train, ntree = 1000, importance = T)
rf.cap.train <- randomForest(sex ~ bri + cro + hue + pes + cul + ala + tar,
data = train.data, ntree = 1000, importance = T)
varImpPlot(rf.cap)
varImpPlot(rf.cap.train)
predValid <- predict(rf.cap.train, test.data, type = "class")
table(predValid, test.data$sex)
tree.rf <- rpart(sex ~ ala + tar + hue, data = carde.cap)
fancyRpartPlot(tree.rf)
carde.mus <- subset(carde, ori == "mus")
rf.mus <- randomForest(sex ~ pes + cul + ala + tar,
data = carde.mus, ntree = 1000, importance = T)
head(carde.mus)
rf.mus <- randomForest(sex ~ cul + ala + tar,
data = carde.mus, ntree = 1000, importance = T)
rf.mus
varImpPlot(rf.mus)
?rpart
round(cor(carde.cap[, 3:10]), 2)
carde.cap <- subset(carde, ori == "captura")
round(cor(carde.cap[, 3:10]), 2)
head(carde.cap)
library(car)
scatterplotMatrix(carde.cap[, c(1, 3:9)])
library(MASS)
AD <- lda(sex ~ bri + cro + hue + pes + cul + ala + tar, data = carde.cap)
AD <- lda(sex ~ bri + cro + hue + pes + cul + ala + tar, CV = T, data = carde.cap)
table(carde.cap$sex, DA$class, dnn = c("Sexo obs", "Sexo pred"))
table(carde.cap$sex, AD$class, dnn = c("Sexo obs", "Sexo pred"))
head(carde.ca`p`)
head(carde.cap)
BoxM(data = carde.cap[, -1], group = carde.cap$sex)
library(MvTests)
library(MVTests)
install.packages("MVTests")
library(MVTests)
mvShapiro(data = carde.cap[, -1], group = carde.cap$sex)
library(MVTests)
mvShapiro(data = carde.cap[, -1], group = carde.cap$sex)
?mvShapiro
library(MVTests)
BoxM(data = carde.cap[, -1], group = carde.cap$sex)
BoxM(data = carde.cap[, -(1:2)], group = carde.cap$sex)
mvShapiro.Test(data = carde.cap[, -c(1:2)], group = carde.cap$sex)
library(MVTests)
mvShapiro(data = carde.cap[, -c(1:2)], group = carde.cap$sex)
??mvShapiro
?MVTests
?rfe
table(carde.cap$sex, AD$class, dnn = c("Sexo obs", "Sexo pred"))
AD
summary(AD)
AD$scaling
AD <- lda(sex ~ bri + cro + hue + pes + cul + ala + tar, data = carde.cap)$scaling
AD
AD.scal <- lda(sex ~ bri + cro + hue + pes + cul + ala + tar, data = carde.cap)$scaling
round(AD.scale, 2)
round(AD.scal, 2)
fancyRpartPlot(tree.rf)
varImpPlot(rf.cap)
carde <- read.table("C:/RD/capturas carde morfo.txt", head = T)
carde$sex <- as.factor(carde$sex)
carde.cap <- subset(carde, ori == "captura")
m <- glm(sex ~ bri + cro + hue + pes + cul + ala + tar, data = carde.cap)
m <- glm(sex ~ bri + cro + hue + pes + cul + ala + tar, family = binomial,
data = carde.cap)
library(MuMIn)
options(na.omit("na.fail"))
options(na.action = "na.fail")
msel <- dredge(m, rank = "AICc")
msel
head(msel)
summary(m)
# Paquetes
library(psych)
library(MuMIn)
library(sjPlot)
library(ggplot2)
# Carga de datos
arqueo <- read.table("C:/RD/datos_lucia_magnin.txt", head = T)
str(arqueo)
table(arqueo$FUN) # num de datos por categoría
arqueo$Geomorfo_LP <- as.factor(arqueo$Geomorfo_LP)
arqueo$sin.aspect <- sin(arqueo$aspect)
arqueo$cos.aspect <- cos(arqueo$aspect)
# Función para obtener pseudo-R2
R2logit<- function(y, model){
R2<- 1-(model$deviance/model$null.deviance)
return(R2)
}
# Subsetear los datos en base al tipo de sitio
A <- subset(arqueo, FUN == "A" | FUN == "NS")
AC <- subset(arqueo, FUN == "AC" | FUN == "NS")
C <- subset(arqueo, FUN == "C" | FUN == "NS")
CC <- subset(arqueo, FUN == "CC" | FUN == "NS")
Ch <- subset(arqueo, FUN == "Ch" | FUN == "NS")
CT <- subset(arqueo, FUN == "CT" | FUN == "NS")
LAL <- subset(arqueo, FUN == "LAL" | FUN == "NS")
LAM <- subset(arqueo, FUN == "LAM" | FUN == "NS")
T <- subset(arqueo, FUN == "T" | FUN == "NS")
TO <- subset(arqueo, FUN == "TO" | FUN == "NS")
m<-rnorm(1000)
l<-m[m>2|m<2]
l<-m[m>2]
l<-c(m[m>2],m[m<2])
hist(m)
l<-m[m>2|m<-2]
l<-m[m>2|m<(-2)]
l<-m[m>(-2)|m<2]
length(l)/1000
l<-m[m>(-2)&m<2]
length(l)/1000
data<-read.table("C:/RD/gala.txt",head=T)
names(data)
ra<-read.table("C:/RD/Raventos_etal_2021_JAE_data.txt",head=T)
ra<-read.table("C:/RD/Raventos_etal_2021_JAE_data.txt",head=T)
head(ra)
hsit(ra$Pre.settlement_growth)
hist(ra$Pre.settlement_growth)
str(ra$Season)
table(ra$Season)
table(ra$Species)
str(ra$Season)
str(ra)
x<-read.csv("Matula_mistletoes.csv")
x<-read.csv("C:/RD/Matula_mistletoes.csv")
x<-read.csv2("C:/RD/Matula_mistletoes.csv")
head(x)
m<-glm(infected~basal_area+CI_tree)
m<-glm(infected~basal_area+CI_tree,data=x,family=binomial)
summary(m)
str(x)
datos <- read.table("C:/RD/Solea.txt", header = TRUE)
# modelo nulo
m1 <- glm(Solea_solea ~ 1, family = binomial, data = datos)
# modelo de temperatura
m2 <- glm(Solea_solea ~ temperature, family = binomial, data = datos)
# modelo de salinidad
m3 <- glm(Solea_solea ~ salinity, family = binomial, data = datos)
# modelo de transparencia
m4 <- glm(Solea_solea ~ transparency, family = binomial, data = datos)
# modelo de profundidad
m5 <- glm(Solea_solea ~ depth, family = binomial, data = datos)
# modelo caracteristicas del agua
m6 <- glm(Solea_solea ~ temperature + salinity + transparency, family = binomial, data = datos)
# Modelo ubicacion en el espacio
m7 <- glm(Solea_solea ~ Area + depth + Area:depth, family = binomial, data = datos)
# Modelo de caracteristicas del sutrato
m8 <- glm(Solea_solea ~ gravel + large_sand + med_fine_sand, family = binomial, data = datos)
# Modelo de caracteristicas del sustrato grueso
m9 <- glm(Solea_solea ~ gravel + large_sand, family = binomial, data = datos)
# Modelo de caracteristicas del sustrato fino
m10 <- glm(Solea_solea ~ med_fine_sand, family = binomial, data = datos)
# Modelo de profundidad y sustrato
m11 <- glm(Solea_solea ~ depth + gravel + large_sand + med_fine_sand, family = binomial, data = datos)
library(MuMIn)
modelos <- list(m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11)
ranking.modelos <- model.sel(modelos, rank = "AICc")
ranking.modelos
plot(1:length(modelos), ranking.modelos$delta, pch = 19, xlab = "Modelo", ylab = expression(Delta ~ "AICc"))
abline(a = 2, b = 0, lty = 2)
modelo.promedio <- model.avg(ranking.modelos, subset = delta < 2)
summary(modelo.promedio)
importance(modelo.promedio)
CI
CI <- as.data.frame(confint(modelo.promedio, full = TRUE))
CI
model.coeff <- as.data.frame(modelo.promedio$coefmat.full)
model.coeff
modelo.promedio
coeff(modelo.promedio)
modelo.promedio$msTable
modelo.promedio$coefficients
model.coeff <- as.data.frame(modelo.promedio$coefficients)
model.coeff$CI.min <- CI$`2.5 %`
t(modelo.promedio$coefficients[1,])
model.coeff <- as.data.frame(t(modelo.promedio$coefficients[1,]))
model.coeff
model.coeff <- as.data.frame(modelo.promedio$coefficients[1,])
model.coeff
CI
model.coeff <- as.data.frame(coeff = modelo.promedio$coefficients[1,])
CI <- as.data.frame(confint(modelo.promedio, full = TRUE))
modelo.promedio$coefficients[1,]
model.coeff <- as.data.frame(coef = modelo.promedio$coefficients[1,])
as.data.frame(coef = modelo.promedio$coefficients[1,])
model.coeff <- data.frame(coef = modelo.promedio$coefficients[1,])
CI <- as.data.frame(confint(modelo.promedio, full = TRUE))
model.coeff$CI.min <- CI$`2.5 %` #pulling out CIs and putting into same df as coefficient estimates
model.coeff$CI.max <- CI$`97.5 %`
model.coeff
model.coeff <- data.frame(Estimate = modelo.promedio$coefficients[1,])
CI <- as.data.frame(confint(modelo.promedio, full = TRUE))
CI <- as.data.frame(confint(modelo.promedio, full = TRUE))
model.coeff$CI.min <- CI$`2.5 %`
setDT(df1, keep.rownames = "coefficient") #put rownames into column
ggplot(data = model.coeff[2:5, ], aes(x = coef, y = Estimate)) +
geom_point(size = 10) +
theme_classic(base_size = 20) +
geom_errorbar(aes(ymin = CI.min, ymax = CI.max), colour = "pink",
width = 0.2, lwd = 1)
library(ggplot2)
rownames(model.coeff)
model.coeff <- data.frame(estimate = modelo.promedio$coefficients[1,])
CI <- as.data.frame(confint(modelo.promedio, full = TRUE))
model.coeff$CI.min <- CI$`2.5 %`
model.coeff$CI.max <- CI$`97.5 %`
model.coeff$coef <- rownames(model.coeff)
ggplot(data = model.coeff[2:5, ], aes(x = coef, y = estimate)) +
geom_point(size = 10) +
theme_classic(base_size = 20) +
geom_errorbar(aes(ymin = CI.min, ymax = CI.max), colour = "pink",
width = 0.2, lwd = 1)
ggplot(data = model.coeff[2:5, ], aes(x = coef, y = estimate)) +
geom_point(size = 10) +
theme_classic(base_size = 20) +
geom_errorbar(aes(ymin = CI.min, ymax = CI.max), colour = "blue",
width = 0, lwd = 1)
ggplot(data = model.coeff[2:5, ], aes(x = coef, y = estimate)) +
geom_point(size = 3) +
width = 0, lwd = 1) +
ggplot(data = model.coeff[2:5, ], aes(x = coef, y = estimate)) +
geom_point(size = 3) +
theme_classic(base_size = 20) +
geom_errorbar(aes(ymin = CI.min, ymax = CI.max), color = "blue",
width = 0.1, lwd = 1) +
xlab("Predictor") + ylab("Estimado") +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray")
ggplot(data = model.coeff[2:5, ], aes(x = coef, y = estimate)) +
geom_point(size = 3) +
theme_classic(base_size = 20) +
geom_pointrange(aes(ymin = CI.min, ymax = CI.max), color = "blue") +
xlab("Predictor") + ylab("Estimado") +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray")
ggplot(data = model.coeff[2:5, ], aes(x = coef, y = estimate)) +
geom_point(size = 4) +
theme_classic(base_size = 20) +
geom_pointrange(aes(ymin = CI.min, ymax = CI.max), color = "coral") +
xlab("Predictor") + ylab("Estimado") +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray")
ggplot(data = model.coeff[2:5, ], aes(x = coef, y = estimate)) +
#geom_point(size = 4) +
theme_classic(base_size = 20) +
geom_pointrange(aes(ymin = CI.min, ymax = CI.max), color = "coral") +
xlab("Predictor") + ylab("Estimado") +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray")
ggplot(data = model.coeff[2:5, ], aes(x = coef, y = estimate)) +
#geom_point(size = 4) +
theme_classic(base_size = 20) +
geom_pointrange(aes(ymin = CI.min, ymax = CI.max), size = 4, color = "coral") +
xlab("Predictor") + ylab("Estimado") +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray")
ggplot(data = model.coeff[2:5, ], aes(x = coef, y = estimate)) +
#geom_point(size = 4) +
theme_classic(base_size = 20) +
geom_pointrange(aes(ymin = CI.min, ymax = CI.max), size = 2.5, color = "coral") +
xlab("Predictor") + ylab("Estimado") +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray")
ggplot(data = model.coeff[2:5, ], aes(x = coef, y = estimate)) +
#geom_point(size = 4) +
theme_classic(base_size = 20) +
geom_pointrange(aes(ymin = CI.min, ymax = CI.max), size = 1, color = "coral") +
xlab("Predictor") + ylab("Estimado") +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray")
