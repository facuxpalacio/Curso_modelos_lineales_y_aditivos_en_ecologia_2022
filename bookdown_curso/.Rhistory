library(MuMIn)
library(sjPlot)
library(ggplot2)
# Carga de datos
arqueo <- read.table("C:/RD/datos_lucia_magnin.txt", head = T)
str(arqueo)
table(arqueo$FUN) # num de datos por categoría
arqueo$Geomorfo_LP <- as.factor(arqueo$Geomorfo_LP)
arqueo$sin.aspect <- sin(arqueo$aspect)
arqueo$cos.aspect <- cos(arqueo$aspect)
# Función para obtener pseudo-R2
R2logit<- function(y, model){
R2<- 1-(model$deviance/model$null.deviance)
return(R2)
}
# Subsetear los datos en base al tipo de sitio
A <- subset(arqueo, FUN == "A" | FUN == "NS")
AC <- subset(arqueo, FUN == "AC" | FUN == "NS")
C <- subset(arqueo, FUN == "C" | FUN == "NS")
CC <- subset(arqueo, FUN == "CC" | FUN == "NS")
Ch <- subset(arqueo, FUN == "Ch" | FUN == "NS")
CT <- subset(arqueo, FUN == "CT" | FUN == "NS")
LAL <- subset(arqueo, FUN == "LAL" | FUN == "NS")
LAM <- subset(arqueo, FUN == "LAM" | FUN == "NS")
T <- subset(arqueo, FUN == "T" | FUN == "NS")
TO <- subset(arqueo, FUN == "TO" | FUN == "NS")
m<-rnorm(1000)
l<-m[m>2|m<2]
l<-m[m>2]
l<-c(m[m>2],m[m<2])
hist(m)
l<-m[m>2|m<-2]
l<-m[m>2|m<(-2)]
l<-m[m>(-2)|m<2]
length(l)/1000
l<-m[m>(-2)&m<2]
length(l)/1000
data<-read.table("C:/RD/gala.txt",head=T)
names(data)
ra<-read.table("C:/RD/Raventos_etal_2021_JAE_data.txt",head=T)
ra<-read.table("C:/RD/Raventos_etal_2021_JAE_data.txt",head=T)
head(ra)
hsit(ra$Pre.settlement_growth)
hist(ra$Pre.settlement_growth)
str(ra$Season)
table(ra$Season)
table(ra$Species)
str(ra$Season)
str(ra)
x<-read.csv("Matula_mistletoes.csv")
x<-read.csv("C:/RD/Matula_mistletoes.csv")
x<-read.csv2("C:/RD/Matula_mistletoes.csv")
head(x)
m<-glm(infected~basal_area+CI_tree)
m<-glm(infected~basal_area+CI_tree,data=x,family=binomial)
summary(m)
str(x)
datos <- read.table("C:/RD/Solea.txt", header = TRUE)
# modelo nulo
m1 <- glm(Solea_solea ~ 1, family = binomial, data = datos)
# modelo de temperatura
m2 <- glm(Solea_solea ~ temperature, family = binomial, data = datos)
# modelo de salinidad
m3 <- glm(Solea_solea ~ salinity, family = binomial, data = datos)
# modelo de transparencia
m4 <- glm(Solea_solea ~ transparency, family = binomial, data = datos)
# modelo de profundidad
m5 <- glm(Solea_solea ~ depth, family = binomial, data = datos)
# modelo caracteristicas del agua
m6 <- glm(Solea_solea ~ temperature + salinity + transparency, family = binomial, data = datos)
# Modelo ubicacion en el espacio
m7 <- glm(Solea_solea ~ Area + depth + Area:depth, family = binomial, data = datos)
# Modelo de caracteristicas del sutrato
m8 <- glm(Solea_solea ~ gravel + large_sand + med_fine_sand, family = binomial, data = datos)
# Modelo de caracteristicas del sustrato grueso
m9 <- glm(Solea_solea ~ gravel + large_sand, family = binomial, data = datos)
# Modelo de caracteristicas del sustrato fino
m10 <- glm(Solea_solea ~ med_fine_sand, family = binomial, data = datos)
# Modelo de profundidad y sustrato
m11 <- glm(Solea_solea ~ depth + gravel + large_sand + med_fine_sand, family = binomial, data = datos)
library(MuMIn)
modelos <- list(m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11)
ranking.modelos <- model.sel(modelos, rank = "AICc")
ranking.modelos
plot(1:length(modelos), ranking.modelos$delta, pch = 19, xlab = "Modelo", ylab = expression(Delta ~ "AICc"))
abline(a = 2, b = 0, lty = 2)
modelo.promedio <- model.avg(ranking.modelos, subset = delta < 2)
summary(modelo.promedio)
importance(modelo.promedio)
CI
CI <- as.data.frame(confint(modelo.promedio, full = TRUE))
CI
model.coeff <- as.data.frame(modelo.promedio$coefmat.full)
model.coeff
modelo.promedio
coeff(modelo.promedio)
modelo.promedio$msTable
modelo.promedio$coefficients
model.coeff <- as.data.frame(modelo.promedio$coefficients)
model.coeff$CI.min <- CI$`2.5 %`
t(modelo.promedio$coefficients[1,])
model.coeff <- as.data.frame(t(modelo.promedio$coefficients[1,]))
model.coeff
model.coeff <- as.data.frame(modelo.promedio$coefficients[1,])
model.coeff
CI
model.coeff <- as.data.frame(coeff = modelo.promedio$coefficients[1,])
CI <- as.data.frame(confint(modelo.promedio, full = TRUE))
modelo.promedio$coefficients[1,]
model.coeff <- as.data.frame(coef = modelo.promedio$coefficients[1,])
as.data.frame(coef = modelo.promedio$coefficients[1,])
model.coeff <- data.frame(coef = modelo.promedio$coefficients[1,])
CI <- as.data.frame(confint(modelo.promedio, full = TRUE))
model.coeff$CI.min <- CI$`2.5 %` #pulling out CIs and putting into same df as coefficient estimates
model.coeff$CI.max <- CI$`97.5 %`
model.coeff
model.coeff <- data.frame(Estimate = modelo.promedio$coefficients[1,])
CI <- as.data.frame(confint(modelo.promedio, full = TRUE))
CI <- as.data.frame(confint(modelo.promedio, full = TRUE))
model.coeff$CI.min <- CI$`2.5 %`
setDT(df1, keep.rownames = "coefficient") #put rownames into column
ggplot(data = model.coeff[2:5, ], aes(x = coef, y = Estimate)) +
geom_point(size = 10) +
theme_classic(base_size = 20) +
geom_errorbar(aes(ymin = CI.min, ymax = CI.max), colour = "pink",
width = 0.2, lwd = 1)
library(ggplot2)
rownames(model.coeff)
model.coeff <- data.frame(estimate = modelo.promedio$coefficients[1,])
CI <- as.data.frame(confint(modelo.promedio, full = TRUE))
model.coeff$CI.min <- CI$`2.5 %`
model.coeff$CI.max <- CI$`97.5 %`
model.coeff$coef <- rownames(model.coeff)
ggplot(data = model.coeff[2:5, ], aes(x = coef, y = estimate)) +
geom_point(size = 10) +
theme_classic(base_size = 20) +
geom_errorbar(aes(ymin = CI.min, ymax = CI.max), colour = "pink",
width = 0.2, lwd = 1)
ggplot(data = model.coeff[2:5, ], aes(x = coef, y = estimate)) +
geom_point(size = 10) +
theme_classic(base_size = 20) +
geom_errorbar(aes(ymin = CI.min, ymax = CI.max), colour = "blue",
width = 0, lwd = 1)
ggplot(data = model.coeff[2:5, ], aes(x = coef, y = estimate)) +
geom_point(size = 3) +
width = 0, lwd = 1) +
ggplot(data = model.coeff[2:5, ], aes(x = coef, y = estimate)) +
geom_point(size = 3) +
theme_classic(base_size = 20) +
geom_errorbar(aes(ymin = CI.min, ymax = CI.max), color = "blue",
width = 0.1, lwd = 1) +
xlab("Predictor") + ylab("Estimado") +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray")
ggplot(data = model.coeff[2:5, ], aes(x = coef, y = estimate)) +
geom_point(size = 3) +
theme_classic(base_size = 20) +
geom_pointrange(aes(ymin = CI.min, ymax = CI.max), color = "blue") +
xlab("Predictor") + ylab("Estimado") +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray")
ggplot(data = model.coeff[2:5, ], aes(x = coef, y = estimate)) +
geom_point(size = 4) +
theme_classic(base_size = 20) +
geom_pointrange(aes(ymin = CI.min, ymax = CI.max), color = "coral") +
xlab("Predictor") + ylab("Estimado") +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray")
ggplot(data = model.coeff[2:5, ], aes(x = coef, y = estimate)) +
#geom_point(size = 4) +
theme_classic(base_size = 20) +
geom_pointrange(aes(ymin = CI.min, ymax = CI.max), color = "coral") +
xlab("Predictor") + ylab("Estimado") +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray")
ggplot(data = model.coeff[2:5, ], aes(x = coef, y = estimate)) +
#geom_point(size = 4) +
theme_classic(base_size = 20) +
geom_pointrange(aes(ymin = CI.min, ymax = CI.max), size = 4, color = "coral") +
xlab("Predictor") + ylab("Estimado") +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray")
ggplot(data = model.coeff[2:5, ], aes(x = coef, y = estimate)) +
#geom_point(size = 4) +
theme_classic(base_size = 20) +
geom_pointrange(aes(ymin = CI.min, ymax = CI.max), size = 2.5, color = "coral") +
xlab("Predictor") + ylab("Estimado") +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray")
ggplot(data = model.coeff[2:5, ], aes(x = coef, y = estimate)) +
#geom_point(size = 4) +
theme_classic(base_size = 20) +
geom_pointrange(aes(ymin = CI.min, ymax = CI.max), size = 1, color = "coral") +
xlab("Predictor") + ylab("Estimado") +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray")
abu.dorm <- read.table("C:/RD/Sturnus dormideros 2009-2014.txt", head=T)
tapply(abu.dorm$nind, abu.dorm$año, sum) # abundancia por dormidero y año
abu.dorm <- read.table("C:/RD/Sturnus dormideros 2009-2014.txt", head=T)
tapply(abu.dorm$nind, abu.dorm$año, sum) # abundancia por dormidero y año
table(abu.dorm$sp.planta)
abu.dorm <- read.table("C:/RD/Sturnus dormideros 2009-2014.txt", head=T)
table(abu.dorm$sp.planta)
39+34
19+25
34+18+21
8+12+2
4+8+25
37+22+9+3
table(abu.dorm$sp.planta)
abu.dorm$año <- as.factor(abu.dorm$año)
abu.dorm$sp.planta <- as.factor(abu.dorm$sp.planta)
boxplot(abu.dorm$nind ~ abu.dorm$año)
library(MASS)
model.dorm <- glm.nb(nind ~ año + sp.planta, data = abu.dorm)
summary(model.dorm)
write.csv(summary(model.dorm)$coeff, "dorm.csv")
library(multcomp)
citation("multcomp")
citation("MASS")
anova(model.dorm)
summary(glht(model.dorm, linfct = mcp(año = "Tukey")))
ggplot(abu.dorm, aes(x = año, y = nind, col = sp.planta)) +
geom_boxplot() + geom_jitter() + xlab("Año") + ylab("Número de individuos")
library(ggplot2)
ggplot(abu.dorm, aes(x = año, y = nind, col = sp.planta)) +
geom_boxplot() + geom_jitter() + xlab("Año") + ylab("Número de individuos")
ggplot(abu.dorm, aes(x = año, y = nind)) +
geom_boxplot() + geom_jitter() + xlab("Año") + ylab("Número de individuos")
ggplot(abu.dorm, aes(x = año, y = nind)) +
geom_boxplot() + geom_jitter(width=0.2) + xlab("Año") + ylab("Número de individuos") +
theme_bw()
ggplot(abu.dorm, aes(x = año, y = nind)) +
geom_boxplot(width=1) + geom_jitter(width=0.2) + xlab("Año") + ylab("Número de individuos") +
theme_bw()
ggplot(abu.dorm, aes(x = año, y = nind)) +
geom_boxplot(width=0.5) + geom_jitter(width=0.2) + xlab("Año") + ylab("Número de individuos") +
theme_bw()
summary(glht(model.dorm, linfct = mcp(sp.planta = "Tukey")))
ggplot(abu.dorm, aes(x = año, y = nind)) + #4x3 in
geom_boxplot(width=0.5) + geom_jitter(width=0.2) + xlab("Año") + ylab("Número de individuos")
tapply(abu.dorm$nind, abu.dorm$año, mean)
tapply(abu.dorm$nind, abu.dorm$año, sd)
table(abu.dorm$sp.planta) # dormideros por especie
tapply(abu.dorm$nind, abu.dorm$sp.planta, mean)
tapply(abu.dorm$nind, abu.dorm$sp.planta, sd)
subset(abu.dorm, sp.planta == c("Phoenix_canariensis", "Pinus", "Cupressus"))
subset(abu.dorm, sp.planta == "Phoenix_canariensis" | "Pinus" | "Cupressus")
abu.dorm.sp <- subset(abu.dorm, sp.planta == "Phoenix_canariensis" | sp.planta == "Pinus" | sp.planta == "Cupressus")
ggplot(abu.dorm.sp, aes(x = sp, y = nind)) + #4x3 in
geom_boxplot(width=0.5) + geom_jitter(width=0.2) + xlab("Año") + ylab("Número de individuos")
ggplot(abu.dorm.sp, aes(x = sp.planta, y = nind)) + #4x3 in
geom_boxplot(width=0.5) + geom_jitter(width=0.2) + xlab("Año") + ylab("Número de individuos")
ggplot(abu.dorm.sp, aes(x = sp.planta, y = nind)) + #4x3 in
geom_boxplot(width=0.5) + geom_jitter(width=0.2) + xlab("Especie") + ylab("Número de individuos")
plantas.dorm <- read.table("C:/RD/Sturnus dormideros arboles.txt", head=T)
round(cor(plantas.dorm[,8:14]), 2)
plot(plantas.dorm$nind ~ plantas.dorm$diam_mayor_m)
plot(plantas.dorm$nind ~ plantas.dorm$volumen_m3)
head(plantas.dorm)
plantas.dorm1 <- subset(plantas.dorm, nind>0)
plantas.dorm
model.plant1 <- glm.nb(nind ~ diam_mayor_m, data = plantas.dorm)
summary(model.plant1)
model.plant1 <- glm.nb(nind ~ diam_mayor_m, data = plantas.dorm1)
summary(model.plant1)
model.plant2 <- glm.nb(nind ~ volumen_m3, data = plantas.dorm1)
summary(model.plant2)
interv.dorm <- read.table("C:/RD/Sturnus dormideros intervalos.txt", head=T)
dorm <- interv.dorm[interv.dorm$t>2, ]
mt<-gamm(nind_dormidero ~ s(t, k = 7), random = list(id = ~1),
correlation = corAR1(form = ~t),
family = poisson, method = "REML", data = dorm)
library(mgcv)
mt<-gamm(nind_dormidero ~ s(t, k = 7), random = list(id = ~1),
correlation = corAR1(form = ~t),
family = poisson, method = "REML", data = dorm)
summary(mt$gam)
newdata <- seq(min(dorm$t), max(dorm$t), length = 100)
x <- seq(min(dorm$t), max(dorm$t), length = 100)
y <- predict(mt, newdata = data.frame(t = x), type = "response")
y <- predict(mt$gam, newdata = data.frame(t = x), type = "response")
newdf <- data.frame(x, y)
newdf <- data.frame(t, pred)
newdf <- data.frame(t = x, pred = y)
ggplot(data = newdf, aes(x = t, y = pred)) +
geom_line(lwd = 2)
ggplot(data = newdf, aes(x = t, y = pred)) +
geom_line(aes(lwd = 2, col = "blue"))
ggplot(data = newdf, aes(x = t, y = pred)) +
geom_line(lwd = 1.5, col = "blue")
x <- seq(min(dorm$t), max(dorm$t), length = 1000)
y <- predict(mt$gam, newdata = data.frame(t = x), type = "response")
newdf <- data.frame(t = x, pred = y)
ggplot(data = newdf, aes(x = t, y = pred)) +
geom_line(lwd = 1.5, col = "blue")
ggplot() +
geom_line(data = newdf, aes(x = t, y = pred), lwd = 1.5, col = "blue") +
xlab("Hora") + ylab("Número de individuos")
dorm <- interv.dorm[interv.dorm$t>3, ]
mt<-gamm(nind_dormidero ~ s(t, k = 7), random = list(id = ~1),
correlation = corAR1(form = ~t),
family = poisson, method = "REML", data = dorm)
m<-gamm(nind_dormidero ~ s(t, k = 7), random = list(id = ~1),
family = poisson, method = "REML", data = dorm)
mt<-gamm(nind_dormidero ~ s(t, k = 6), random = list(id = ~1),
correlation = corAR1(form = ~t),
family = poisson, method = "REML", data = dorm)
gam.check(mt$gam)
summary(mt$gam)
gam.check(mt$gam)
plot(mt$gam)
head(dorm)
exp(3)
?predict.gam
ggplot() +
?predict.lme
ggplot() +
geom_line(data = newdf, aes(x = t, y = pred), lwd = 1.5, col = "blue") +
xlab("Hora") + ylab("Número de individuos") +
geom_boxplot(data = dorm, aes(x = t, y = nind))
head(dorm)
ggplot() +
geom_line(data = newdf, aes(x = t, y = pred), lwd = 1.5, col = "blue") +
xlab("Hora") + ylab("Número de individuos") +
geom_boxplot(data = dorm, aes(x = t, y = nind_dormidero))
ggplot() +
geom_line(data = newdf, aes(x = t, y = pred), lwd = 1.5, col = "blue") +
xlab("Hora") + ylab("Número de individuos") +
geom_boxplot(data = dorm, aes(x = factor(t), y = nind_dormidero))
ggplot() +
geom_line(data = newdf, aes(x = t, y = pred), lwd = 1.5, col = "blue") +
xlab("Hora") + ylab("Número de individuos") +
geom_boxplot(data = dorm, aes(x = as.factor(t), y = nind_dormidero))
ggplot() +
geom_line(data = newdf, aes(x = t, y = pred), lwd = 1.5, col = "blue") +
xlab("Hora") + ylab("Número de individuos") +
geom_boxplot(data = dorm, aes(x = t, y = nind_dormidero, group = t))
y <- predict(mt$gam, newdata = data.frame(t = x), type = "response", level = 0)
newdf <- data.frame(t = x, pred = y)
ggplot() +
geom_line(data = newdf, aes(x = t, y = pred), lwd = 1.5, col = "blue") +
xlab("Hora") + ylab("Número de individuos")
ypop <- predict(mt$gam, newdata = data.frame(t = x), type = "response", level = 0)
newdf <- data.frame(t = x, pred = ypop)
head(dorm)
unique(dorm$id)
id = rep(dorm$id,10)
id = rep(dorm$id,5)
id = rep(dorm$id,10)
x <- seq(min(dorm$t), max(dorm$t), length = 1260)
newdata <- data.frame(t = x, id = rep(dorm$id, 10))
ypop <- predict(mt$gam,
newdata = data.frame(t = x, id = rep(dorm$id)),
type = "response", level = 0)
x <- seq(min(dorm$t), max(dorm$t), length = 1260)
newdata <- data.frame(t = x, id = rep(dorm$id, 10))
ypop <- predict(mt$gam, newdata = newdata,
type = "response", level = 0)
yrand <- predict(mt$gam, newdata = newdata,
type = "response", level = 1)
newdf <- data.frame(t = x, pred.pop = ypop, pred.rand = yrand)
newdf <- data.frame(t = x, id = rep(dorm$id, 10), pred.pop = ypop, pred.rand = yrand)
ggplot() +
geom_line(data = newdf, aes(x = t, y = pred.pop), lwd = 1.5, col = "blue") +
xlab("Hora") + ylab("Número de individuos") +
#geom_boxplot(data = dorm, aes(x = t, y = nind_dormidero, group = t))
geom_line(data = newdf, aes(x = t, y = pred.rand, group = id), lwd = 1.5)
ggplot() +
geom_line(data = newdf, aes(x = t, y = pred.pop), lwd = 1.5, col = "blue") +
xlab("Hora") + ylab("Número de individuos") +
#geom_boxplot(data = dorm, aes(x = t, y = nind_dormidero, group = t))
geom_line(data = newdf, aes(x = t, y = pred.rand, group = id))
x <- seq(min(dorm$t), max(dorm$t), length = 1000)
newdata <- data.frame(t = x)
ypop <- predict(mt$gam, newdata = newdata,
type = "response", level = 0)
x <- seq(min(dorm$t), max(dorm$t), length = 1000)
newdata <- data.frame(t = x)
ypop <- predict(mt$gam, newdata = newdata,
type = "response", level = 0)
pop.df <- data.frame(t = x, pred.pop = ypop)
ggplot() +
geom_line(data = pop.df, aes(x = t, y = pred.pop), lwd = 1.5, col = "blue") +
xlab("Hora") + ylab("Número de individuos")
newdata <- data.frame(t = x, id = rep(dorm$id, 10))
x <- seq(min(dorm$t), max(dorm$t), length = 1260)
newdata <- data.frame(t = x, id = rep(dorm$id, 10))
yrand <- predict(mt$gam, newdata = newdata,
type = "response", level = 1)
newdata$yrand <- predict(mt$gam, newdata = newdata,
type = "response", level = 1)
head(newdata)
x1 <- seq(min(dorm$t), max(dorm$t), length = 1000)
newdata1 <- data.frame(t = x1)
ypop <- predict(mt$gam, newdata = newdata1,
type = "response", level = 0)
pop.df <- data.frame(t = x, pred.pop = ypop)
pop.df <- data.frame(t = x1, pred.pop = ypop)
x2 <- seq(min(dorm$t), max(dorm$t), length = 1260)
newdata2 <- data.frame(t = x, id = rep(dorm$id, 10))
newdata2$yrand <- predict(mt$gam, newdata = newdata2,
type = "response", level = 1)
head(newdata2)
x2 <- expand.grid(dorm$t, dorm$id)
head(x2)
colnames(newdata2) <- c("t", "id")
head(x2)
newdata2 <- expand.grid(dorm$t, dorm$id)
colnames(newdata2) <- c("t", "id")
rm(x2)
newdata2$yrand <- predict(mt$gam, newdata = newdata2,
type = "response", level = 1)
head(newdata2)
newdata2$pred.rand <- predict(mt$gam, newdata = newdata2,
type = "response", level = 1)
ggplot() +
geom_line(data = pop.df, aes(x = t, y = pred.pop), lwd = 1.5, col = "blue") +
xlab("Hora") + ylab("Número de individuos") +
#geom_boxplot(data = dorm, aes(x = t, y = nind_dormidero, group = t))
geom_line(data = newdata2, aes(x = t, y = pred.rand, group = id))
newdata2[1:100,]
x2 <- seq(min(dorm$t), max(dorm$t), length = 1260)
newdata2 <- data.frame(t = x1, id = dorm$id)
newdata2 <- data.frame(t = x1, id = rep(dorm$id, 10))
newdata2 <- data.frame(t = x2, id = rep(dorm$id, 10))
head(newdata2)
newdata2[1:100,]
newdata2[1:200,]
x2 <- rep(seq(min(dorm$t), max(dorm$t), length = 10), 10)
unique(dorm$id)
x2 <- rep(seq(min(dorm$t), max(dorm$t), length = 10), 21)
x2 <- rep(seq(min(dorm$t), max(dorm$t), length = 500), 21)
x2 <- rep(seq(min(dorm$t), max(dorm$t), length = 200), 21)
x2 <- rep(seq(min(dorm$t), max(dorm$t), length = 100), 21)
newdata2 <- data.frame(t = x2, id = rep(dorm$id, 10))
id = rep(dorm$id, 20)
100*21
10*21
length(unique(dorm$id))
newdata2 <- data.frame(t = x2, id = rep(dorm$id, 100))
head(newdata)
head(newdata2)
newdata2$pred.rand <- predict(mt$gam, newdata = newdata2,
type = "response", level = 1)
ggplot() +
geom_line(data = pop.df, aes(x = t, y = pred.pop), lwd = 1.5, col = "blue") +
xlab("Hora") + ylab("Número de individuos") +
#geom_boxplot(data = dorm, aes(x = t, y = nind_dormidero, group = t))
geom_line(data = newdata2, aes(x = t, y = pred.rand, group = id))
ggplot() +
#geom_line(data = pop.df, aes(x = t, y = pred.pop), lwd = 1.5, col = "blue") +
xlab("Hora") + ylab("Número de individuos") +
#geom_boxplot(data = dorm, aes(x = t, y = nind_dormidero, group = t))
geom_line(data = newdata2, aes(x = t, y = pred.rand, group = id))
ypop <- predict_gamm(mt, newdata = newdata1,
type = "response", re_form=NA)
ypop <- predict(mt$lme, newdata = newdata1,
type = "response", re_form=NA)
head(newdata)
ypop <- predict(mt$lme, newdata = newdata1,
type = "response", re_form=NULL)
head(newdata1)
x1 <- seq(min(dorm$t), max(dorm$t), length = 1000)
newdata1 <- data.frame(t = x1)
ypop <- predict(mt$lme, newdata = newdata1,
type = "response", re_form=~0)
ypop <- predict(mt$gam, newdata = newdata1,
type = "response", re_form=NA)
newdata2$pred.rand <- predict(mt$gam, newdata = newdata2,
type = "response", re_form=NULL)
ggplot() +
#geom_line(data = pop.df, aes(x = t, y = pred.pop), lwd = 1.5, col = "blue") +
xlab("Hora") + ylab("Número de individuos") +
#geom_boxplot(data = dorm, aes(x = t, y = nind_dormidero, group = t))
geom_line(data = newdata2, aes(x = t, y = pred.rand, group = id))
ggplot() +
#geom_line(data = pop.df, aes(x = t, y = pred.pop), lwd = 1.5, col = "blue") +
xlab("Hora") + ylab("Número de individuos") +
#geom_boxplot(data = dorm, aes(x = t, y = nind_dormidero, group = t))
geom_line(data = newdata2, aes(x = t, y = pred.rand, col = id))
head(newdata2)
head(newdata1)
ypop <- predict(mt$gam, newdata = newdata1,
type = "response", re_form=NA)
pop.df <- data.frame(t = x1, pred.pop = ypop)
head(newdata1)
newdata1$ypop <- predict(mt$gam, newdata = newdata1,
type = "response", re_form=NA)
head(newdata1)
newdata1$pred.pop <- predict(mt$gam, newdata = newdata1,
type = "response", re_form=NA)
head(newdata1)
head(newdata2)
newdata2$pred.rand <- predict(mt$gam, newdata = newdata1,
type = "response", re_form=NULL)
newdata2 <- data.frame(t = x2)
newdata2$pred.rand <- predict(mt$gam, newdata = newdata2,
type = "response", re_form=NULL)
?predict.lme
newdata1$pred.pop <- predict(mt$gam, newdata = newdata1,
type = "response", level = 0)
newdata2$pred.rand <- predict(mt$gam, newdata = newdata2,
type = "response", level = 0:1)
ggplot() +
#geom_line(data = newdata1, aes(x = t, y = pred.pop), lwd = 1.5, col = "blue") +
xlab("Hora") + ylab("Número de individuos") +
#geom_boxplot(data = dorm, aes(x = t, y = nind_dormidero, group = t))
geom_line(data = newdata2, aes(x = t, y = pred.rand, col = id))
head(newdata2)
x2 <- rep(seq(min(dorm$t), max(dorm$t), length = 100), 21)
newdata2 <- data.frame(t = x2, id = rep(dorm$id, 100))
newdata2$pred.rand <- predict(mt$gam, newdata = newdata2,
type = "response", level = 0:1)
ggplot() +
#geom_line(data = newdata1, aes(x = t, y = pred.pop), lwd = 1.5, col = "blue") +
xlab("Hora") + ylab("Número de individuos") +
#geom_boxplot(data = dorm, aes(x = t, y = nind_dormidero, group = t))
geom_line(data = newdata2, aes(x = t, y = pred.rand, col = id))
