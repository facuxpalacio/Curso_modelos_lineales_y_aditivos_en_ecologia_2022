[["introducción-a-los-modelos-lineales.html", "Modelos lineales y aditivos en ecología 1 Introducción a los modelos lineales 1.1 Definición de modelo lineal 1.2 Correlación lineal simple 1.3 Matrices de correlación 1.4 Regresión lineal simple 1.5 Relación entre regresión y correlación 1.6 Matrices de gráficos de dispersión 1.7 Regresión lineal multiple 1.8 Variables categóricas (= dummies) 1.9 Test de t 1.10 Test de t pareado 1.11 Análisis de la varianza 1.12 Supuestos 1.13 Transformaciones 1.14 Actividades", " Modelos lineales y aditivos en ecología Facundo X. Palacio 2022-04-27 1 Introducción a los modelos lineales 1.1 Definición de modelo lineal set.seed(999) layout(matrix(1:4, 2, 2)) x &lt;- rnorm(100) y1 &lt;- 2 + 1.5*x plot(x, y1) y2 &lt;- 2 + 1.5*x - 0.2*x^2 plot(x, y2) y3 &lt;- exp(x) plot(x, y3) y4 &lt;- log(y3) plot(x, y4) layout(1) 1.2 Correlación lineal simple x &lt;- rnorm(100) e &lt;- rnorm(100, mean = 0, sd = 1) y &lt;- 2 + 1.5*x + e plot(x, y) # Covarianza cov(x, y) ## [1] 1.21263 # Correlación producto-momento de Pearson cov(x, y)/(sd(x)*sd(y)) ## [1] 0.7897866 cor(x, y, method = &quot;pearson&quot;) ## [1] 0.7897866 cor.test(x, y) ## ## Pearson&#39;s product-moment correlation ## ## data: x and y ## t = 12.747, df = 98, p-value &lt; 2.2e-16 ## alternative hypothesis: true correlation is not equal to 0 ## 95 percent confidence interval: ## 0.7023179 0.8537620 ## sample estimates: ## cor ## 0.7897866 # Monotonía layout(matrix(1:4, 2, 2)) x1 &lt;- seq(1, 10, length = 100) y1 &lt;- 0.5 + 2*x1 plot(x1, y1, type = &quot;l&quot;) y2 &lt;- 0.5 + 2*x1 - 0.2*x1^2 plot(x1, y2, type = &quot;l&quot;) y3 &lt;- exp(-5 + x1) plot(x1, y3, type = &quot;l&quot;) y4 &lt;- exp(-5 + x1)/(1 + exp(-5 + x1)) plot(x1, y4, type = &quot;l&quot;) layout(1) # Correlación de Spearman cor(x1, y4, method = &quot;spearman&quot;) ## [1] 1 xrango &lt;- rank(x1) yrango &lt;- rank(y4) plot(xrango, yrango) cor(xrango, yrango, method = &quot;spearman&quot;) ## [1] 1 1.3 Matrices de correlación A continuación se presentan las medidas del tamaño corporal en adultos de tres especies de pinguinos en islas del Archipiélago Palmer, Antártida. library(palmerpenguins) str(penguins) ## tibble [344 x 8] (S3: tbl_df/tbl/data.frame) ## $ species : Factor w/ 3 levels &quot;Adelie&quot;,&quot;Chinstrap&quot;,..: 1 1 1 1 1 1 1 1 1 1 ... ## $ island : Factor w/ 3 levels &quot;Biscoe&quot;,&quot;Dream&quot;,..: 3 3 3 3 3 3 3 3 3 3 ... ## $ bill_length_mm : num [1:344] 39.1 39.5 40.3 NA 36.7 39.3 38.9 39.2 34.1 42 ... ## $ bill_depth_mm : num [1:344] 18.7 17.4 18 NA 19.3 20.6 17.8 19.6 18.1 20.2 ... ## $ flipper_length_mm: int [1:344] 181 186 195 NA 193 190 181 195 193 190 ... ## $ body_mass_g : int [1:344] 3750 3800 3250 NA 3450 3650 3625 4675 3475 4250 ... ## $ sex : Factor w/ 2 levels &quot;female&quot;,&quot;male&quot;: 2 1 1 NA 1 2 1 2 NA NA ... ## $ year : int [1:344] 2007 2007 2007 2007 2007 2007 2007 2007 2007 2007 ... cor(penguins[, 3:6], use = &quot;complete.obs&quot;) ## bill_length_mm bill_depth_mm flipper_length_mm body_mass_g ## bill_length_mm 1.0000000 -0.2350529 0.6561813 0.5951098 ## bill_depth_mm -0.2350529 1.0000000 -0.5838512 -0.4719156 ## flipper_length_mm 0.6561813 -0.5838512 1.0000000 0.8712018 ## body_mass_g 0.5951098 -0.4719156 0.8712018 1.0000000 pairs(penguins[, 3:6]) Ad &lt;- subset(penguins, species == &quot;Adelie&quot;) round(cor(Ad[, 3:6], use = &quot;complete.obs&quot;), 2) ## bill_length_mm bill_depth_mm flipper_length_mm body_mass_g ## bill_length_mm 1.00 0.39 0.33 0.55 ## bill_depth_mm 0.39 1.00 0.31 0.58 ## flipper_length_mm 0.33 0.31 1.00 0.47 ## body_mass_g 0.55 0.58 0.47 1.00 library(Hmisc) matriz.corr &lt;- rcorr(as.matrix(Ad[, 3:6]), type = &quot;pearson&quot;) matriz.corr ## bill_length_mm bill_depth_mm flipper_length_mm body_mass_g ## bill_length_mm 1.00 0.39 0.33 0.55 ## bill_depth_mm 0.39 1.00 0.31 0.58 ## flipper_length_mm 0.33 0.31 1.00 0.47 ## body_mass_g 0.55 0.58 0.47 1.00 ## ## n= 151 ## ## ## P ## bill_length_mm bill_depth_mm flipper_length_mm body_mass_g ## bill_length_mm 0e+00 0e+00 0e+00 ## bill_depth_mm 0e+00 1e-04 0e+00 ## flipper_length_mm 0e+00 1e-04 0e+00 ## body_mass_g 0e+00 0e+00 0e+00 p.adjust(matriz.corr$P, method = &quot;holm&quot;) ## [1] NA 4.004485e-06 1.786194e-04 2.953193e-12 4.004485e-06 NA ## [7] 2.437897e-04 1.199041e-13 1.786194e-04 2.437897e-04 NA 1.074612e-08 ## [13] 2.953193e-12 1.199041e-13 1.074612e-08 NA 1.4 Regresión lineal simple \\[y = \\beta_0 + \\beta_1 x + \\epsilon\\] \\[\\epsilon \\sim N(0, \\sigma^2)\\] x &lt;- rnorm(100) e &lt;- rnorm(100, mean = 0, sd = 1) y &lt;- 2 + 1.5*x + e plot(x, y) datos &lt;- data.frame(x, y) reg.simple &lt;- lm(y ~ x, data = datos) summary(reg.simple) ## ## Call: ## lm(formula = y ~ x, data = datos) ## ## Residuals: ## Min 1Q Median 3Q Max ## -2.51881 -0.65262 -0.06149 0.59194 3.05669 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 1.9948 0.0996 20.03 &lt;2e-16 *** ## x 1.4928 0.1020 14.64 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.996 on 98 degrees of freedom ## Multiple R-squared: 0.6863, Adjusted R-squared: 0.6831 ## F-statistic: 214.4 on 1 and 98 DF, p-value: &lt; 2.2e-16 # Pendiente cov(x, y)/var(x) ## [1] 1.492825 summary(reg.simple)$coeff ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 1.994796 0.09960184 20.02770 2.042392e-36 ## x 1.492825 0.10195980 14.64131 2.072208e-26 # Coeficiente de determinación SCE &lt;- sum((mean(datos$y) - reg.simple$fitted)^2) # suma de cuadrados explicada SCT &lt;- sum((datos$y - mean(datos$y))^2) # suma de cuadrados total R2 &lt;- SCE/SCT R2 ## [1] 0.6862674 summary(reg.simple)$r.squared ## [1] 0.6862674 # Gráfico plot(x, y) abline(reg.simple, lwd = 2) 1.5 Relación entre regresión y correlación beta &lt;- summary(reg.simple)$coeff[2, 1] beta*sd(x)/sd(y) ## [1] 0.8284126 sqrt(summary(reg.simple)$r.squared) ## [1] 0.8284126 cor(x, y) ## [1] 0.8284126 1.6 Matrices de gráficos de dispersión pairs(Ad[, 3:6], pch = 19, col = &quot;blue&quot;, lower.panel = NULL) pairs(penguins[, 3:6], pch = 19, col = c(&quot;red&quot;, &quot;orange&quot;, &quot;blue&quot;)[penguins$species], lower.panel = NULL) library(psych) pairs.panels(Ad[, 3:6], method = &quot;pearson&quot;, # correlación density = FALSE, # gráficos de densidad ellipses = FALSE, # elipses de confianza lm = TRUE) # recta 1.7 Regresión lineal multiple \\[y = \\beta_0 + \\beta_1 x_1 + \\beta_2 x_2 + ... + \\beta_n x_n + \\epsilon\\] \\[\\epsilon \\sim N(0, \\sigma^2)\\] Analizaremos la relación entre la longitud del pico (´bill_length_mm´), masa corporal (body_mass_g) y alto del pico (bill_depth_mm) en pinguinos Adelia (\\(Pygoscelis adeliae\\)). model.Ad &lt;- lm(bill_length_mm ~ body_mass_g + bill_depth_mm, data = Ad) summary(model.Ad) ## ## Call: ## lm(formula = bill_length_mm ~ body_mass_g + bill_depth_mm, data = Ad) ## ## Residuals: ## Min 1Q Median 3Q Max ## -6.8363 -1.5105 0.0952 1.4967 5.6090 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 2.386e+01 2.752e+00 8.671 7.00e-15 *** ## body_mass_g 2.811e-03 4.853e-04 5.792 4.02e-08 *** ## bill_depth_mm 2.466e-01 1.829e-01 1.348 0.18 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 2.228 on 148 degrees of freedom ## (1 observation deleted due to missingness) ## Multiple R-squared: 0.3097, Adjusted R-squared: 0.3004 ## F-statistic: 33.21 on 2 and 148 DF, p-value: 1.222e-12 sum.cuad.exp &lt;- sum((mean(na.omit(Ad$bill_length_mm)) - model.Ad$fitted)^2) sum.cuad.tot &lt;- sum((na.omit(Ad$bill_length_mm) - mean(na.omit(Ad$bill_length_mm)))^2) R2 &lt;- sum.cuad.exp/sum.cuad.tot R2 ## [1] 0.3097341 # Gráfico de dispersión con plano de regresión library(plot3D) x &lt;- Ad$body_mass_g y &lt;- Ad$bill_depth_mm z &lt;- Ad$bill_length_mm x.pred &lt;- seq(min(x, na.rm = T), max(x, na.rm = T), length = 30) y.pred &lt;- seq(min(y, na.rm = T), max(y, na.rm = T), length = 30) xy &lt;- expand.grid(body_mass_g = x.pred, bill_depth_mm = y.pred) z.pred &lt;- matrix(predict(model.Ad, newdata = xy), nrow = 30, ncol = 30) scatter3D(x, y, z, pch = 18, cex = 2, theta = 35, phi = 20, ticktype = &quot;detailed&quot;, xlab = &quot;Masa corporal&quot;, ylab = &quot;Alto del pico&quot;, zlab = &quot;Longitud del pico&quot;, surf = list(x = x.pred, y = y.pred, z = z.pred, facets = NA)) library(visreg) Ad$bill_depth_cat &lt;- cut(Ad$bill_depth_mm, 3, labels = c(&quot;Pequeño&quot;, &quot;Mediano&quot;, &quot;Grande&quot;)) model.Ad_cat &lt;- lm(bill_length_mm ~ body_mass_g + bill_depth_cat, data = Ad) visreg(model.Ad_cat, &quot;body_mass_g&quot;, &quot;bill_depth_cat&quot;, gg = TRUE) 1.8 Variables categóricas (= dummies) model.penguins1 &lt;- lm(bill_length_mm ~ body_mass_g + species, data = penguins) summary(model.penguins1) ## ## Call: ## lm(formula = bill_length_mm ~ body_mass_g + species, data = penguins) ## ## Residuals: ## Min 1Q Median 3Q Max ## -6.8129 -1.6718 0.1336 1.4720 9.2902 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 2.492e+01 1.063e+00 23.443 &lt; 2e-16 *** ## body_mass_g 3.749e-03 2.823e-04 13.276 &lt; 2e-16 *** ## speciesChinstrap 9.921e+00 3.511e-01 28.258 &lt; 2e-16 *** ## speciesGentoo 3.558e+00 4.858e-01 7.324 1.78e-12 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 2.403 on 338 degrees of freedom ## (2 observations deleted due to missingness) ## Multiple R-squared: 0.808, Adjusted R-squared: 0.8063 ## F-statistic: 474 on 3 and 338 DF, p-value: &lt; 2.2e-16 model.penguins2 &lt;- lm(bill_length_mm ~ body_mass_g + species + body_mass_g:species, data = penguins) summary(model.penguins2) ## ## Call: ## lm(formula = bill_length_mm ~ body_mass_g + species + body_mass_g:species, ## data = penguins) ## ## Residuals: ## Min 1Q Median 3Q Max ## -6.4208 -1.6461 0.0919 1.4718 9.3138 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 26.9941391 1.5926015 16.950 &lt; 2e-16 *** ## body_mass_g 0.0031879 0.0004271 7.464 7.27e-13 *** ## speciesChinstrap 5.1800537 3.2746719 1.582 0.115 ## speciesGentoo -0.2545907 2.7138655 -0.094 0.925 ## body_mass_g:speciesChinstrap 0.0012748 0.0008740 1.459 0.146 ## body_mass_g:speciesGentoo 0.0009030 0.0006066 1.489 0.138 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 2.399 on 336 degrees of freedom ## (2 observations deleted due to missingness) ## Multiple R-squared: 0.8098, Adjusted R-squared: 0.807 ## F-statistic: 286.1 on 5 and 336 DF, p-value: &lt; 2.2e-16 anova(model.penguins2) ## Analysis of Variance Table ## ## Response: bill_length_mm ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## body_mass_g 1 3599.7 3599.7 625.5924 &lt;2e-16 *** ## species 2 4612.5 2306.3 400.8045 &lt;2e-16 *** ## body_mass_g:species 2 18.6 9.3 1.6159 0.2003 ## Residuals 336 1933.4 5.8 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 1.9 Test de t Se muestran los tiempos de coagulación sanguínea (min) en conejos bajo el efecto de dos drogas (A y B). t_coag &lt;- c(8.8, 8.4, 7.9, 8.7, 9.1, 9.6, 9.5, 9.9, 9.0, 11.1, 9.6, 8.7, 10.4, 9.5) droga &lt;- c(rep(&quot;A&quot;, 7), rep(&quot;B&quot;, 7)) coag &lt;- data.frame(t_coag, droga) t.test(t_coag ~ droga, var.equal = TRUE, data = coag) ## ## Two Sample t-test ## ## data: t_coag by droga ## t = -2.3063, df = 12, p-value = 0.03974 ## alternative hypothesis: true difference in means is not equal to 0 ## 95 percent confidence interval: ## -1.72245499 -0.04897358 ## sample estimates: ## mean in group A mean in group B ## 8.857143 9.742857 model.coag &lt;- lm(t_coag ~ droga, data = coag) summary(model.coag) ## ## Call: ## lm(formula = t_coag ~ droga, data = coag) ## ## Residuals: ## Min 1Q Median 3Q Max ## -1.0429 -0.4036 -0.1000 0.5429 1.3571 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 8.8571 0.2716 32.617 4.37e-13 *** ## drogaB 0.8857 0.3840 2.306 0.0397 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.7185 on 12 degrees of freedom ## Multiple R-squared: 0.3071, Adjusted R-squared: 0.2494 ## F-statistic: 5.319 on 1 and 12 DF, p-value: 0.03974 X_drogaA &lt;- mean(t_coag[1:7]) X_drogaB &lt;- mean(t_coag[8:14]) X_drogaB - X_drogaA ## [1] 0.8857143 # Homogeneidad de varianzas (test de F) var.test(t_coag[1:7], t_coag[8:14]) ## ## F test to compare two variances ## ## data: t_coag[1:7] and t_coag[8:14] ## F = 0.54196, num df = 6, denom df = 6, p-value = 0.4749 ## alternative hypothesis: true ratio of variances is not equal to 1 ## 95 percent confidence interval: ## 0.09312469 3.15409283 ## sample estimates: ## ratio of variances ## 0.541963 1.10 Test de t pareado fotosint &lt;- c(1.42, 1.4, 1.44, 1.44, 1.42, 1.46, 1.49, 1.5, 1.42, 1.48, 1.38, 1.36, 1.47, 1.39, 1.43, 1.41, 1.43, 1.45, 1.36, 1.46) nutriente &lt;- c(rep(&quot;N1&quot;, 10), rep(&quot;N2&quot;, 10)) plantas &lt;- data.frame(fotosint, nutriente) t.test(fotosint ~ nutriente, paired = TRUE, data = plantas) ## ## Paired t-test ## ## data: fotosint by nutriente ## t = 3.4138, df = 9, p-value = 0.007703 ## alternative hypothesis: true difference in means is not equal to 0 ## 95 percent confidence interval: ## 0.01113248 0.05486752 ## sample estimates: ## mean of the differences ## 0.033 1.11 Análisis de la varianza Se quiere evaluar si hay diferencias entre la longitud del pico en las tres especies de pingüino del Archipiélago Palmer. boxplot(penguins$bill_length_mm ~ penguins$species) model.spp &lt;- aov(bill_length_mm ~ species, data = na.omit(penguins)) summary(model.spp) ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## species 2 7015 3508 397.3 &lt;2e-16 *** ## Residuals 330 2914 9 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 summary(lm(bill_length_mm ~ species, data = na.omit(penguins))) ## ## Call: ## lm(formula = bill_length_mm ~ species, data = na.omit(penguins)) ## ## Residuals: ## Min 1Q Median 3Q Max ## -7.934 -2.234 0.076 2.066 12.032 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 38.8240 0.2459 157.88 &lt;2e-16 *** ## speciesChinstrap 10.0099 0.4362 22.95 &lt;2e-16 *** ## speciesGentoo 8.7441 0.3670 23.83 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 2.971 on 330 degrees of freedom ## Multiple R-squared: 0.7066, Adjusted R-squared: 0.7048 ## F-statistic: 397.3 on 2 and 330 DF, p-value: &lt; 2.2e-16 # Comparaciones multiples TukeyHSD(model.spp) ## Tukey multiple comparisons of means ## 95% family-wise confidence level ## ## Fit: aov(formula = bill_length_mm ~ species, data = na.omit(penguins)) ## ## $species ## diff lwr upr p adj ## Chinstrap-Adelie 10.009851 8.982789 11.0369128 0.0000000 ## Gentoo-Adelie 8.744095 7.880135 9.6080546 0.0000000 ## Gentoo-Chinstrap -1.265756 -2.329197 -0.2023151 0.0148212 1.12 Supuestos 1.12.1 Colinealidad library(car) vif(model.Ad) ## body_mass_g bill_depth_mm ## 1.496861 1.496861 1.12.2 Análisis de residuos # Regresión hist(model.Ad$residuals) qqPlot(model.Ad$residuals) ## 15 74 ## 14 73 layout(matrix(1:4, 2, 2)) plot(model.Ad) layout(1) # Test de t y ANOVA model.spp &lt;- aov(bill_length_mm ~ species, data = na.omit(penguins)) resid.model.spp &lt;- resid(model.spp) boxplot(resid.model.spp ~ species, data = na.omit(penguins)) termplot(model.spp, se = TRUE, partial.resid = TRUE) bartlett.test(resid.model.spp ~ species, data = na.omit(penguins)) ## ## Bartlett test of homogeneity of variances ## ## data: resid.model.spp by species ## Bartlett&#39;s K-squared = 5.6782, df = 2, p-value = 0.05848 1.13 Transformaciones \\[log(y) = y&#39; = \\beta_0 + \\beta_1 x_1 + \\beta_2 x_2 + ... + \\beta_n x_n + \\epsilon\\] layout(matrix(1:6, 2, 3)) abundancia &lt;- rpois(n = 1000, lambda = 4) hist(abundancia, main = &quot;Abundancia&quot;) log.abun &lt;- log(abundancia + 1) hist(log.abun, breaks = 6, main = &quot;log(Abundancia + 1)&quot;) peso &lt;- rgamma(n = 1000, shape = 5) hist(peso, main = &quot;Peso&quot;) sqrt.peso &lt;- sqrt(peso) hist(sqrt.peso, breaks = 6, main = &quot;Raíz cuadrada del peso&quot;) prop.infectados &lt;- rbinom(n = 1000, size = 10, p = 0.4)/10 hist(prop.infectados, main = &quot;Proporción de infectados&quot;) logit.prop &lt;- log(prop.infectados/(1 - prop.infectados)) hist(logit.prop, main = &quot;Logit proporción de infectados&quot;, breaks = 6) layout(1) 1.14 Actividades 1.14.1 Ejercicios de repaso 1.1. Calcule: El logaritmo en base e y en base 10 de 9. La raíz cuadrada y quinta de 10. 1.2. Genere los siguientes vectores x e y, respectivamente: 1 4 7 11 5 2 1 2 3 4 5 6 Luego, identifique las operaciones para obtener: 2 6 10 15 10 8 2 8 14 22 10 4 3 6 9 12 15 18 1.3. Genere las siguientes secuencias: 1 2 3 4 5 6 7 8 9 10 11 5 6 7 8 9 10 5.0 5.5 6.0 6.5 7.0 7.5 8.0 8.5 9.0 9.5 10.0 10.0 10.1 10.2 10.3 10.4 10.5 10.6 10.7 10.8 10.9 11.0 11.1 11.2 11.3 1 3 5 7 9 9 7 5 3 1 3 3 3 3 3 1 2 1 2 1 2 1 2 1 2 IML R IML R IML R IML R 1 1 1 2 2 2 3 3 3 4 4 4 5 5 5 1.4. Cree un vector que represente una variable aleatoria de 1000 valores con distribución normal estándar. Grafique un histograma (color naranja), teniendo en cuenta 10 y 15 celdas. Calcule su media y desvío estándar. Calcule qué porcentaje de los datos se encuentra entre 2 desvíos estándares. 1.5. Cree un vector que represente una variable aleatoria de 500 valores con distribución de Poisson y diferentes medias (1, 5 y 100). Para cada distribución, calcule su media y varianza. Grafique los tres histogramas en el mismo panel ¿Qué observa? Haga una tabla que muestre la frecuencia para cada conteo y luego realice un gráfico de barras. 1.6. Utilizando la variable aleatoria del Ejercicio 1.2, construya un marco de datos que incluya además, un factor de 4 niveles con el mismo número de observaciones en cada nivel, de tal forma que los primeros valores pertenezcan al primer nivel, los siguientes al segundo nivel y así sucesivamente. Calcule la media y desvío estándar para los valores de cada nivel, y luego grafique un histograma para cada uno de ellos. 1.7. A partir de información de la web, construya un marco de datos que incluya como variables 5 ciudades del mundo, con su área y número de habitantes. Obtenga cuál es la ciudad con el mayor número de habitantes de su marco de datos y en qué fila se encuentra. Filtre aquellas ciudades con más de 500 mil habitantes. Filtre aquellas ciudades con menos de 300 mil habitantes y un área menor a 250 mil ha. Cree una columna adicional binaria, en la cual a aquellas ciudades con más de 500 mil habitantes se le asigne un 1, o de lo contrario, un 0. 1.8. Simule 1000 valores de una distribución normal (media = 10, desvío = 3) y utilicela como predictor en un modelo de regresión lineal, de forma tal que la variable respuesta cambie 0.2 unidades por unidad del predictor. Calcule la covarianza y la correlación de Pearson entre ambas variables. Grafique un diagrama de dispersión junto con el modelo ajustado. Realice un resumen del modelo y compare las estimaciones de los parámetros obtenidos (intercepto, pendiente y varianza de los residuos) con los poblacionales. Estandarice ambas variables y calcule la correlación de Pearson ¿Qué observa y por qué? Con los mismos parámetros, simule ahora 50 valores y obtenga el resumen del modelo ¿Qué sucede con la pendiente y la significancia, y por qué? 1.14.2 Ejercicio 1.2 Se analizó la diversidad de diatomeas (div) en cursos de agua (curso) con distintos niveles de concentración de zinc (zinc). Los datos se encuentran en el archivo diatom.xls. Grafique la distribución de frecuencias de la diversidad de diatomeas y la diversidad como función de la concentración de zinc. Calcule la media, mediana, varianza, desvío estándar y coeficiente de variación de la diversidad para cada concentración de zinc ¿Qué patrón le sugieren los datos? 1.14.3 Ejercicio 1.3 Sokal &amp; Rohlf (1997) analizaron el consumo de oxígeno en dos especies de lapas bajo tres concentraciones de agua de mar (limpets.csv). Calcule la media y varianza para cada especie, concentración y combinación de especie y concentración. Realice un gráfico que muestre las diferentes combinaciones entre especie y concentración. Grafique e interprete la interacción entre ambos factores utilizando la función interaction.plot del paquete car. ¿Existen diferencias entre las especies y las concentraciones? Utilice un modelo adecuado que responda a esta pregunta. Evalúe los supuestos del modelo. 1.14.4 Ejercicio 1.4 Allison &amp; Cicchetti (1976) compilaron la cantidad de horas de sueño, la morfología y el riesgo de predación (escala de 1 a 5 -menor valor, menor riesgo de predación-) en 62 especies de mamíferos (allison.csv). Realice un resumen (media, desvío y coeficiente de variación) de las variables del conjunto de datos. Grafique histogramas para cada una de las variables y diagramas de dispersión para cada par de variables. Ajuste un modelo adecuado entre longevidad en años (LifeSpan), masa corporal en kg (BodyWt) y predación (Predation). Grafique la relación entre masa corporal y longevidad, para cada nivel de predación ¿Puede observar algún patrón que haga reconsiderar el modelo ajustado en el inciso anterior? Evalúe los supuestos del modelo final. Realice un gráfico que represente el modelo ajustado. Según el modelo ¿Cuánto sería la longevidad para el ser humano, bajo los supuestos que considere? ¿Es realista la predicción que obtuvo? "],["modelos-lineales-generalizados.html", "2 Modelos lineales generalizados 2.1 Datos de presencia-ausencia 2.2 Conteos I 2.3 Modelo lineal general 2.4 GLM Gamma 2.5 Actividades 2.6 Conteos II 2.7 Inferencia multimodelo 2.8 Actividades", " 2 Modelos lineales generalizados 2.1 Datos de presencia-ausencia Cabral et al. (2007) estudiaron la distribución de platijas (Solea solea) en el estuario Tagus, Portugal (Solea.txt). Se desea saber qué factores (temperatura, transparencia, salinidad) están relacionados con la presencia esta especie. # Analisis exploratorio datos &lt;- read.table(&quot;Solea.txt&quot;, header = TRUE) str(datos) ## &#39;data.frame&#39;: 65 obs. of 13 variables: ## $ Sample : int 1 2 3 4 5 6 7 8 9 10 ... ## $ season : int 1 1 1 1 1 1 1 1 1 1 ... ## $ month : int 5 5 5 5 5 5 5 5 5 5 ... ## $ Area : int 2 2 2 4 4 4 3 3 3 1 ... ## $ depth : num 3 2.6 2.6 2.1 3.2 3.5 1.6 1.7 1.8 4.5 ... ## $ temperature : int 20 18 19 20 20 20 19 17 19 21 ... ## $ salinity : int 30 29 30 29 30 32 29 28 29 12 ... ## $ transparency : int 15 15 15 15 15 7 15 10 10 35 ... ## $ gravel : num 3.74 1.94 2.88 11.06 9.87 ... ## $ large_sand : num 13.15 4.99 8.98 11.96 28.6 ... ## $ med_fine_sand: num 11.93 5.43 16.85 21.95 19.49 ... ## $ mud : num 71.2 87.6 71.3 55 42 ... ## $ Solea_solea : int 0 0 1 0 0 0 1 1 0 1 ... hist(datos$Solea_solea) table(datos$Solea_solea) ## ## 0 1 ## 39 26 pairs(datos[, 4:12]) round(cor(datos[, 4:12]), 2) ## Area depth temperature salinity transparency gravel large_sand ## Area 1.00 -0.55 -0.18 0.76 -0.56 0.44 -0.44 ## depth -0.55 1.00 0.14 -0.66 0.57 -0.24 0.31 ## temperature -0.18 0.14 1.00 -0.35 0.54 -0.16 0.12 ## salinity 0.76 -0.66 -0.35 1.00 -0.66 0.38 -0.54 ## transparency -0.56 0.57 0.54 -0.66 1.00 -0.25 0.37 ## gravel 0.44 -0.24 -0.16 0.38 -0.25 1.00 0.01 ## large_sand -0.44 0.31 0.12 -0.54 0.37 0.01 1.00 ## med_fine_sand -0.69 0.67 0.25 -0.80 0.69 -0.32 0.56 ## mud 0.49 -0.47 -0.16 0.63 -0.52 -0.19 -0.87 ## med_fine_sand mud ## Area -0.69 0.49 ## depth 0.67 -0.47 ## temperature 0.25 -0.16 ## salinity -0.80 0.63 ## transparency 0.69 -0.52 ## gravel -0.32 -0.19 ## large_sand 0.56 -0.87 ## med_fine_sand 1.00 -0.78 ## mud -0.78 1.00 2.1.1 GLM binomial m.bin &lt;- glm(Solea_solea ~ temperature + transparency + salinity, family = binomial, data = datos) summary(m.bin) ## ## Call: ## glm(formula = Solea_solea ~ temperature + transparency + salinity, ## family = binomial, data = datos) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -2.2170 -0.7607 -0.6364 0.7219 1.8447 ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 5.221629 3.524358 1.482 0.13845 ## temperature -0.100542 0.148829 -0.676 0.49932 ## transparency -0.001162 0.025347 -0.046 0.96343 ## salinity -0.142652 0.049986 -2.854 0.00432 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for binomial family taken to be 1) ## ## Null deviance: 87.492 on 64 degrees of freedom ## Residual deviance: 67.973 on 61 degrees of freedom ## AIC: 75.973 ## ## Number of Fisher Scoring iterations: 4 2.1.2 Diagnósticos plot(m.bin) library(DHARMa) plot(simulateResiduals(fittedModel = m.bin)) 2.1.3 Bondad del ajuste summary(m.bin) ## ## Call: ## glm(formula = Solea_solea ~ temperature + transparency + salinity, ## family = binomial, data = datos) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -2.2170 -0.7607 -0.6364 0.7219 1.8447 ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 5.221629 3.524358 1.482 0.13845 ## temperature -0.100542 0.148829 -0.676 0.49932 ## transparency -0.001162 0.025347 -0.046 0.96343 ## salinity -0.142652 0.049986 -2.854 0.00432 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for binomial family taken to be 1) ## ## Null deviance: 87.492 on 64 degrees of freedom ## Residual deviance: 67.973 on 61 degrees of freedom ## AIC: 75.973 ## ## Number of Fisher Scoring iterations: 4 # Pseudo-R2 1 - (m.bin$dev/m.bin$null) ## [1] 0.2230856 library(performance) # Coeficiente de determinación de Tjur r2_tjur(m.bin) ## Tjur&#39;s R2 ## 0.2840808 2.1.4 Gráfico del modelo library(visreg) visreg(fit = m.bin, xvar = &quot;salinity&quot;, scale = &quot;response&quot;, ylim = c(0, 1), xlab = &quot;Salinidad&quot;, ylab = &quot;Probabilidad de presencia&quot;) points(datos$salinity, datos$Solea_solea) 2.1.5 Interpretación de los coeficientes exp(m.bin$coeff[2]) # Razon de odds ## temperature ## 0.9043472 Esto quiere decir que, por unidad de salinidad, la relacion \\(\\frac{P(presencia)}{P(ausencia)}\\) (odd) disminuye en 0.90 unidades 2.1.6 Ecuación library(equatiomatic) extract_eq(m.bin, use_coefs = TRUE, fix_signs = TRUE) \\[ \\log\\left[ \\frac { \\widehat{P( \\operatorname{Solea\\_solea} = \\operatorname{1} )} }{ 1 - \\widehat{P( \\operatorname{Solea\\_solea} = \\operatorname{1} )} } \\right] = 5.22 - 0.1(\\operatorname{temperature}) + 0(\\operatorname{transparency}) - 0.14(\\operatorname{salinity}) \\] 2.1.7 Capacidad predictiva # Matriz de confusión obs &lt;- datos$Solea_solea pred &lt;- ifelse(predict(m.bin, type = &quot;response&quot;)&gt;0.5, 1, 0) matriz.conf &lt;- table(obs, pred) matriz.conf ## pred ## obs 0 1 ## 0 34 5 ## 1 11 15 # Porcentajes de clasificación matriz.conf/rowSums(matriz.conf) ## pred ## obs 0 1 ## 0 0.8717949 0.1282051 ## 1 0.4230769 0.5769231 2.2 Conteos I Gotelli &amp; Ellison (2002) analizaron los determinantes biogeográficos de la riqueza de hormigas (Srich) a escala regional (hormigas.txt). Para esto se describieron el tipo de hábitat (Habitat), la latitud (Latitude) y la altitud (Elevation). # Análisis exploratorio h &lt;- read.table(&quot;hormigas.txt&quot;, header = T) str(h) ## &#39;data.frame&#39;: 44 obs. of 5 variables: ## $ Site : chr &quot;TPB&quot; &quot;HBC&quot; &quot;CKB&quot; &quot;SKP&quot; ... ## $ Srich : int 6 16 18 17 9 15 7 12 14 9 ... ## $ Habitat : chr &quot;Forest&quot; &quot;Forest&quot; &quot;Forest&quot; &quot;Forest&quot; ... ## $ Latitude : num 42 42 42 42 42 ... ## $ Elevation: int 389 8 152 1 210 78 47 491 121 95 ... h$Habitat &lt;- as.factor(h$Habitat) pairs(h[, 2:5]) round(cor(h[, c(2, 4:5)]), 2) ## Srich Latitude Elevation ## Srich 1.00 -0.44 -0.38 ## Latitude -0.44 1.00 0.18 ## Elevation -0.38 0.18 1.00 plot(table(h$Srich), xlab = &quot;Número de especies&quot;, ylab = &quot;Frecuencia&quot;) hist(h$Srich, xlab = &quot;Número de especies&quot;, ylab = &quot;Frecuencia relativa&quot;, main = &quot;&quot;, freq = FALSE) # Ajuste de distribución a los datos sim.pois &lt;- dpois(x = 0:max(h$Srich), lambda = mean(h$Srich)) lines(x = 0:max(h$Srich), y = sim.pois, col = &quot;blue&quot;, lwd = 2, type = &quot;b&quot;) var(h$Srich)/mean(h$Srich) ## [1] 2.566343 2.2.1 GLMs Poisson y quasi-Poisson 2.2.1.1 GLM Poisson m.pois &lt;- glm(Srich ~ Latitude + Elevation + Habitat, family = poisson, data = h) summary(m.pois) ## ## Call: ## glm(formula = Srich ~ Latitude + Elevation + Habitat, family = poisson, ## data = h) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -2.20939 -0.72643 -0.05933 0.51571 2.60147 ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 11.9368121 2.6214970 4.553 5.28e-06 *** ## Latitude -0.2357930 0.0616638 -3.824 0.000131 *** ## Elevation -0.0011411 0.0003749 -3.044 0.002337 ** ## HabitatForest 0.6354389 0.1195664 5.315 1.07e-07 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for poisson family taken to be 1) ## ## Null deviance: 102.76 on 43 degrees of freedom ## Residual deviance: 40.69 on 40 degrees of freedom ## AIC: 209.04 ## ## Number of Fisher Scoring iterations: 4 2.2.1.2 GLM quasi-Poisson m.qpois &lt;- glm(Srich ~ Latitude + Elevation + Habitat, family = quasipoisson, data = h) summary(m.qpois) ## ## Call: ## glm(formula = Srich ~ Latitude + Elevation + Habitat, family = quasipoisson, ## data = h) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -2.20939 -0.72643 -0.05933 0.51571 2.60147 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 11.9368121 2.6594025 4.489 5.94e-05 *** ## Latitude -0.2357930 0.0625554 -3.769 0.000529 *** ## Elevation -0.0011411 0.0003803 -3.000 0.004626 ** ## HabitatForest 0.6354389 0.1212952 5.239 5.52e-06 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for quasipoisson family taken to be 1.029128) ## ## Null deviance: 102.76 on 43 degrees of freedom ## Residual deviance: 40.69 on 40 degrees of freedom ## AIC: NA ## ## Number of Fisher Scoring iterations: 4 # Parámetro de sobredispersión resid &lt;- residuals(m.qpois, type = &quot;pearson&quot;) nparam &lt;- length(m.qpois$coeff) ndatos &lt;- nrow(h) disp.param &lt;- sum(resid^2)/(ndatos - nparam) disp.param ## [1] 1.029116 m.qpois.null &lt;- glm(Srich ~ 1, family = quasipoisson, data = h) summary(m.qpois.null) ## ## Call: ## glm(formula = Srich ~ 1, family = quasipoisson, data = h) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -2.2409 -1.2420 -0.3959 0.4492 3.4539 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 1.94915 0.09113 21.39 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for quasipoisson family taken to be 2.566343) ## ## Null deviance: 102.76 on 43 degrees of freedom ## Residual deviance: 102.76 on 43 degrees of freedom ## AIC: NA ## ## Number of Fisher Scoring iterations: 5 library(DHARMa) testDispersion(m.pois) ## ## DHARMa nonparametric dispersion test via sd of residuals fitted vs. simulated ## ## data: simulationOutput ## dispersion = 1.0136, p-value = 0.92 ## alternative hypothesis: two.sided 2.2.1.3 Diagnósticos residP &lt;- resid(m.qpois, type = &quot;pearson&quot;) # residuos de Pearson residD &lt;- resid(m.qpois, type = &quot;deviance&quot;) # residuos de devianza pred &lt;- predict(m.qpois, type = &quot;response&quot;) # valores predichos plot(pred, residP) plot(pred, residD) plot(simulateResiduals(fittedModel = m.pois)) 2.2.1.4 Bondad del ajuste 1 - (m.qpois$dev/m.qpois$null) # Pseudo-R2 ## [1] 0.6040372 2.2.1.5 Ecuación library(equatiomatic) extract_eq(m.qpois, use_coefs = TRUE, fix_signs = TRUE) \\[ \\log ({ \\widehat{E( \\operatorname{Srich} )} }) = 11.94 - 0.24(\\operatorname{Latitude}) + 0(\\operatorname{Elevation}) + 0.64(\\operatorname{Habitat}_{\\operatorname{Forest}}) \\] 2.2.1.6 Gráfico del modelo library(visreg) visreg(fit = m.qpois, xvar = &quot;Latitude&quot;, by = &quot;Habitat&quot;, overlay = TRUE, scale = &quot;response&quot;, xlab = &quot;Latitud&quot;, ylab = &quot;Número de especies&quot;, type = &quot;conditional&quot;, cond = list(Latitude = mean(h$Latitude), Elevation = mean(h$Elevation))) bg &lt;- h[h$Habitat == &quot;Bog&quot;, ] ft &lt;- h[h$Habitat == &quot;Forest&quot;, ] points(bg$Latitude, bg$Srich, pch=19, col = &quot;red&quot;) points(ft$Latitude, ft$Srich, pch=19, col = &quot;blue&quot;) 2.2.2 GLM binomial negativo Leong et al. (2014) estudiaron el efecto del paisaje (urbano, agrícola y natural) sobre el número de interacciones de polinizadores nativos en \\(Centaurea solstitialis\\) (Asteraceae). Se quiere evaluar si existen diferencias en el número de interacciones (total) entre los 3 tipos de ambientes (type) teniendo en cuenta la temperatura (temp) y la velocidad del viento (wind). # Análisis exploratorio pol &lt;- read.table(&quot;bees_data.txt&quot;, header = T) str(pol) ## &#39;data.frame&#39;: 36 obs. of 34 variables: ## $ locality : chr &quot;arabian&quot; &quot;arabian&quot; &quot;arabian&quot; &quot;bdm_f&quot; ... ## $ type : chr &quot;a&quot; &quot;a&quot; &quot;a&quot; &quot;n&quot; ... ## $ lat : num 37.9 37.9 37.9 38 38 ... ## $ long : num -122 -122 -122 -122 -122 ... ## $ water : int 0 0 0 0 0 0 0 0 0 0 ... ## $ urban : int 18900 18900 18900 37800 37800 37800 4500 4500 4500 198000 ... ## $ agr : int 252000 252000 252000 0 0 0 16200 16200 16200 558000 ... ## $ natural : int 513900 513900 513900 747900 747900 747900 765000 765000 765000 32400 ... ## $ bare : int 1800 1800 1800 0 0 0 0 0 0 0 ... ## $ bloom.cat : int 3 3 3 3 3 3 4 4 4 4 ... ## $ time : chr &quot;am&quot; &quot;mid&quot; &quot;pm&quot; &quot;am&quot; ... ## $ wind : num 2.7 1.35 0.8 2.3 3.75 3.7 2.4 2.15 2.5 0.85 ... ## $ temp : num 80.9 94.3 91.1 86.1 87.4 ... ## $ hb : int 70 44 24 34 24 27 40 29 14 88 ... ## $ bumble : int 0 0 0 1 0 4 0 0 0 0 ... ## $ carpenter : int 0 0 0 0 0 1 0 0 0 0 ... ## $ hlb : int 2 0 0 7 2 0 9 2 0 1 ... ## $ svastra : int 0 0 0 0 0 0 0 0 0 0 ... ## $ agtex : int 4 1 0 0 0 0 0 0 0 0 ... ## $ ssb.med : int 0 0 0 0 0 0 1 0 0 1 ... ## $ ssb.small : int 0 0 1 4 0 4 1 3 2 9 ... ## $ sdb.round : int 1 0 6 1 1 1 2 3 4 2 ... ## $ sdb.shield : int 3 2 2 0 2 0 0 0 0 0 ... ## $ shbb.large : int 0 0 0 0 0 0 0 0 0 2 ... ## $ shbb.med : int 0 1 0 4 0 0 8 5 5 2 ... ## $ shbb.small : int 1 3 0 0 0 0 1 1 1 0 ... ## $ anthidium : int 0 0 0 0 0 0 0 0 0 0 ... ## $ cuckoo : int 0 0 0 0 0 0 1 0 0 0 ... ## $ total.native: int 11 7 9 17 5 10 23 14 12 17 ... ## $ total : int 81 51 33 51 29 37 63 43 26 105 ... ## $ min : int 90 90 90 90 90 90 90 90 90 90 ... ## $ num.group : int 6 5 4 6 4 5 8 6 5 7 ... ## $ shannon : num 0.597 0.575 0.817 1.096 0.642 ... ## $ even : num 0.333 0.357 0.59 0.612 0.463 ... pol$habitat &lt;- factor(pol$type, levels = c(&quot;n&quot;, &quot;a&quot;, &quot;u&quot;)) pairs(pol[, c(&quot;habitat&quot;, &quot;temp&quot;, &quot;wind&quot;, &quot;total&quot;)]) boxplot(pol$total ~ pol$habitat) cor(pol$temp, pol$wind) ## [1] -0.02087349 hist(pol$total, xlab = &quot;Número de interacciones&quot;, ylab = &quot;Frecuencia relativa&quot;, main = &quot;&quot;, freq = FALSE, ylim = c(0, 0.05)) # Ajuste de distribución a los datos sim.pois &lt;- dpois(x = 0:max(pol$total), lambda = mean(pol$total)) lines(x = 0:max(pol$total), y = sim.pois, col = &quot;blue&quot;, lwd = 2, type = &quot;b&quot;) var(pol$total)/mean(pol$total) ## [1] 30.01128 2.2.2.1 Chequear sobredispersión mqpoi.pol &lt;- glm(total ~ habitat + temp + wind, family = quasipoisson, data = pol) summary(mqpoi.pol) ## ## Call: ## glm(formula = total ~ habitat + temp + wind, family = quasipoisson, ## data = pol) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -8.7048 -2.7630 -0.5307 2.2527 8.9461 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 2.244844 1.518268 1.479 0.14935 ## habitata 0.813256 0.238963 3.403 0.00186 ** ## habitatu 0.535908 0.233539 2.295 0.02868 * ## temp 0.018127 0.016226 1.117 0.27252 ## wind -0.001247 0.116820 -0.011 0.99155 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for quasipoisson family taken to be 18.37662) ## ## Null deviance: 876.87 on 35 degrees of freedom ## Residual deviance: 565.09 on 31 degrees of freedom ## AIC: NA ## ## Number of Fisher Scoring iterations: 5 library(DHARMa) mpoi.pol &lt;- glm(total ~ habitat + temp + wind, family = poisson, data = pol) testDispersion(mpoi.pol) ## ## DHARMa nonparametric dispersion test via sd of residuals fitted vs. simulated ## ## data: simulationOutput ## dispersion = 21.413, p-value &lt; 2.2e-16 ## alternative hypothesis: two.sided 2.2.2.2 Validación del modelo quasi-Poisson plot(simulateResiduals(fittedModel = mpoi.pol)) 2.2.2.3 Modelo binomial negativo library(MASS) mbn.pol &lt;- glm.nb(total ~ habitat + temp + wind, data = pol) summary(mbn.pol) ## ## Call: ## glm.nb(formula = total ~ habitat + temp + wind, data = pol, init.theta = 5.957692263, ## link = log) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -2.3561 -0.8982 -0.1773 0.5760 1.8680 ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 2.82455 1.28889 2.191 0.02842 * ## habitata 0.78487 0.19397 4.046 5.2e-05 *** ## habitatu 0.52773 0.18051 2.924 0.00346 ** ## temp 0.01218 0.01406 0.866 0.38652 ## wind -0.01878 0.10041 -0.187 0.85161 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for Negative Binomial(5.9577) family taken to be 1) ## ## Null deviance: 58.860 on 35 degrees of freedom ## Residual deviance: 36.513 on 31 degrees of freedom ## AIC: 358.06 ## ## Number of Fisher Scoring iterations: 1 ## ## ## Theta: 5.96 ## Std. Err.: 1.47 ## ## 2 x log-likelihood: -346.062 2.2.2.4 Validación del modelo binomial negativo plot(simulateResiduals(fittedModel = mbn.pol)) 2.2.2.5 Bondad del ajuste 1 - (mbn.pol$dev/mbn.pol$null) # Pseudo-R2 ## [1] 0.3796712 2.2.2.6 Ecuación extract_eq(mbn.pol, use_coefs = TRUE, fix_signs = TRUE) \\[ \\log ({ \\widehat{E( \\operatorname{total} )} }) = 2.82 + 0.78(\\operatorname{habitat}_{\\operatorname{a}}) + 0.53(\\operatorname{habitat}_{\\operatorname{u}}) + 0.01(\\operatorname{temp}) - 0.02(\\operatorname{wind}) \\] 2.2.2.7 Comparaciones múltiples library(multcomp) comp &lt;- glht(mbn.pol, mcp(habitat = &quot;Tukey&quot;)) summary(comp) ## ## Simultaneous Tests for General Linear Hypotheses ## ## Multiple Comparisons of Means: Tukey Contrasts ## ## ## Fit: glm.nb(formula = total ~ habitat + temp + wind, data = pol, init.theta = 5.957692263, ## link = log) ## ## Linear Hypotheses: ## Estimate Std. Error z value Pr(&gt;|z|) ## a - n == 0 0.7849 0.1940 4.046 &lt; 0.001 *** ## u - n == 0 0.5277 0.1805 2.924 0.00964 ** ## u - a == 0 -0.2571 0.1785 -1.441 0.31960 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## (Adjusted p values reported -- single-step method) 2.2.2.8 Incluyendo un offset mbn.pol.off &lt;- glm.nb(total ~ habitat + temp + wind + offset(log(min)), data = pol) summary(mbn.pol.off) ## ## Call: ## glm.nb(formula = total ~ habitat + temp + wind + offset(log(min)), ## data = pol, init.theta = 5.957692263, link = log) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -2.3561 -0.8982 -0.1773 0.5760 1.8680 ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) -1.67526 1.28889 -1.300 0.19368 ## habitata 0.78487 0.19397 4.046 5.2e-05 *** ## habitatu 0.52773 0.18051 2.924 0.00346 ** ## temp 0.01218 0.01406 0.866 0.38652 ## wind -0.01878 0.10041 -0.187 0.85161 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for Negative Binomial(5.9577) family taken to be 1) ## ## Null deviance: 58.860 on 35 degrees of freedom ## Residual deviance: 36.513 on 31 degrees of freedom ## AIC: 358.06 ## ## Number of Fisher Scoring iterations: 1 ## ## ## Theta: 5.96 ## Std. Err.: 1.47 ## ## 2 x log-likelihood: -346.062 2.2.2.9 Gráficos de los modelos layout(matrix(1:2, 1, 2)) visreg(fit = mbn.pol, xvar = &quot;habitat&quot;, scale = &quot;response&quot;, cond = list(temp = mean(pol$temp), wind = mean(pol$wind)), xlab = &quot;Habitat&quot;, ylab = &quot;Numero de visitas&quot;, main = &quot;GLM binomial negativo&quot;) visreg(fit = mbn.pol.off, xvar = &quot;habitat&quot;, scale = &quot;response&quot;, cond = list(temp = mean(pol$temp), wind = mean(pol$wind), min = 1), xlab = &quot;Habitat&quot;, ylab = &quot;Tasa de visitas (ind/min)&quot;, main = &quot;GLM binomial negativo con offset&quot;) layout(1) 2.3 Modelo lineal general Palacio et al. (2014) estudiaron la selección natural mediada por aves frugívoras sobre rasgos de los frutos de Celtis tala (frutos Celtis 2013.txt), incluyendo el diámetro (diam), peso (peso), concentración de azúcares (az), peso de pulpa (pulpa), peso de semilla (sem) y relación peso de pulpa/peso de semilla (pulpa.sem). Analizar qué factores explican el tamaño del fruto. celtis &lt;- read.delim(&quot;frutos Celtis 2013.csv&quot;, sep = &quot;;&quot;) str(celtis) ## &#39;data.frame&#39;: 617 obs. of 8 variables: ## $ planta : chr &quot;P1-10&quot; &quot;P1-10&quot; &quot;P1-10&quot; &quot;P1-10&quot; ... ## $ parche : chr &quot;P1&quot; &quot;P1&quot; &quot;P1&quot; &quot;P1&quot; ... ## $ diam : num 9.26 8.12 9.01 8.57 7.48 ... ## $ peso : num 0.414 0.291 0.387 0.339 0.222 0.307 0.318 0.35 0.259 0.294 ... ## $ az : num 18.5 21.5 18.5 23.5 16.5 ... ## $ pulpa : num 0.361 0.252 0.331 0.287 0.177 0.252 0.272 0.292 0.217 0.253 ... ## $ sem : num 0.0523 0.0393 0.0556 0.0519 0.0443 0.0555 0.0453 0.0581 0.0419 0.0417 ... ## $ pulpa.sem: num 6.91 6.41 5.96 5.53 4 ... pairs(celtis[, 3:7]) round(cor(celtis[, 4:7], use = &quot;complete.obs&quot;), 2) ## peso az pulpa sem ## peso 1.00 -0.33 0.99 0.45 ## az -0.33 1.00 -0.37 0.20 ## pulpa 0.99 -0.37 1.00 0.34 ## sem 0.45 0.20 0.34 1.00 hist(celtis$diam, xlab = &quot;Diametro (mm)&quot;, ylab = &quot;Frecuencia&quot;, main = &quot;&quot;) mlg &lt;- glm(diam ~ az + sem, family = gaussian, data = celtis) summary(mlg) ## ## Call: ## glm(formula = diam ~ az + sem, family = gaussian, data = celtis) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -1.96247 -0.49375 -0.01025 0.46537 2.04017 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 8.750071 0.176681 49.52 &lt;2e-16 *** ## az -0.094204 0.006975 -13.51 &lt;2e-16 *** ## sem 39.834317 2.400758 16.59 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for gaussian family taken to be 0.4902039) ## ## Null deviance: 487.54 on 613 degrees of freedom ## Residual deviance: 299.51 on 611 degrees of freedom ## (3 observations deleted due to missingness) ## AIC: 1309.7 ## ## Number of Fisher Scoring iterations: 2 2.4 GLM Gamma Allen et al. (2015) analizaron el efecto de grandes carnívoros (\\(Ursus americanus\\) y \\(Puma concolor\\)) sobre la actividad de carroñeros. Registraron la duración media del evento de alimentación (duration) por carroñeros en sitios con cadáveres producto de pumas y sitios control donde se colocaron cadáveres colectados en la ruta (trat). # Gráficos exploratorios datos &lt;- read.table(&quot;puma.txt&quot;, header = TRUE) datos$trat &lt;- as.factor(datos$trat) P &lt;- subset(datos, trat == &quot;Puma_Kill&quot;) C &lt;- subset(datos, trat == &quot;Control&quot;) layout(matrix(1:2, 1, 2)) hist(P$duration) hist(C$duration) layout(1) boxplot(datos$duration ~ datos$trat) # GLM Gamma m.Gamma &lt;- glm(duration ~ trat, family = Gamma, data = datos) summary(m.Gamma) ## ## Call: ## glm(formula = duration ~ trat, family = Gamma, data = datos) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -1.7942 -0.8165 -0.1525 0.3143 2.2724 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 0.06639 0.01251 5.308 2.43e-06 *** ## tratPuma_Kill 0.03731 0.02067 1.805 0.077 . ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for Gamma family taken to be 0.7808647) ## ## Null deviance: 35.695 on 52 degrees of freedom ## Residual deviance: 33.092 on 51 degrees of freedom ## AIC: 363.65 ## ## Number of Fisher Scoring iterations: 6 # Comparaciones múltiples library(multcomp) comp &lt;- glht(m.Gamma, mcp(trat = &quot;Tukey&quot;)) summary(comp) ## ## Simultaneous Tests for General Linear Hypotheses ## ## Multiple Comparisons of Means: Tukey Contrasts ## ## ## Fit: glm(formula = duration ~ trat, family = Gamma, data = datos) ## ## Linear Hypotheses: ## Estimate Std. Error z value Pr(&gt;|z|) ## Puma_Kill - Control == 0 0.03731 0.02067 1.805 0.0711 . ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## (Adjusted p values reported -- single-step method) 2.5 Actividades 2.5.1 Ejercicio 2.1 Identifique qué tipo de distribuciones de probabilidad utilizaría para las siguientes variables de respuesta. Justifique en cada caso. Densidad de especies de plantas en parcelas de un bosque. Probabilidad de detección de una especie de anfibio en charcas temporarias. La tasa de crecimiento en pichones de una especie de ave. El sexo en una especie de lagarto. 2.5.2 Ejercicio 2.2 Se estimó la prevalencia del parásito Elaphostrongylus cervi en ciervos colorados de granjas de España (Tbdeer). En cada granja (Farm) se muestreó un grupo de animales (DeerSampledCervi) y se registró si eran positivos para la enfermedad (DeerPosCervi). Además, se registraron variables de hábitat, como porcentaje de áreas abiertas (OpenLand), arbustos (ScrubLand) y plantaciones de pino (PinePlantation), densidad de plantas y árboles de Quercus sp. (QuercusPlants, QuercusTrees). También se estimaron abundancias relativas de jabalí (WildBoarIndex) y ciervo colorado (RedDeerIndex), área del campo (EstateSize) y si el campo estaba cercado (1 = cercado, 0 = no cercado). Determine, cuáles de estas variables están involucradas en la prevalencia de la enfermedad. Valide y grafique el modelo resultante. 2.5.3 Ejercicio 2.3 Simule un modelo lineal general (utilice la función rnorm) con dos variables (una con un efecto positivo y otra con un efecto negativo sobre la respuesta) y ajuste un modelo con las funciones lm y glm. Compare ambos modelos ¿Qué conclusión obtiene? 2.5.3.1 Ejercicio 2.4 Desarrolle un script para calcular el R2 de Tjur utilizando el GLM binomial de Solea.txt, donde: \\[R^{2}_{Tjur} = \\frac{\\sum \\hat{p}(y = 1)}{n_1}\\ + \\frac{\\sum \\hat{p}(y = 0)}{n_0}\\] Corrobore el resultado con la función r2_tjur del paquete performance ¿En qué situación hipotética el \\(R^2\\) vale 0? 2.6 Conteos II 2.6.1 Modelos truncados en cero Santos et al. (2011) estudiaron la probabilidad de persistencia de las carcasas de animales muertos en ruta (Snakes.txt). La variable respuesta es la cantidad de días que perduraban las carcasas sin ser removidas (N_days). Las variables explicatorias son la longitud de cada especie (Size_cm), la proporción de días con lluvia (PDayRain), las precipitaciones totales (Tot_Rain), la temperatura diaria promedio (Temp_avg), la identidad de la ruta que representa la intesidad del tráfico (Road; EN114 tiene alto tránsito, EN4 tiene tráfico medio, y EN370_EN114_4 tiene bajo tráfico), la ubicación en la ruta (Road_Loc; L = asfalto, V = borde), la estación (Season), y la especie (Species). # Analisis exploratorio serp &lt;- read.table(&quot;Snakes.txt&quot;, header = T) str(serp) ## &#39;data.frame&#39;: 130 obs. of 11 variables: ## $ ID : int 2176 2448 2917 2927 2845 2849 2860 2760 2758 2764 ... ## $ Road : chr &quot;EN114&quot; &quot;EN114&quot; &quot;EN114&quot; &quot;EN114&quot; ... ## $ Month : chr &quot;Jul&quot; &quot;Aug&quot; &quot;Oct&quot; &quot;Oct&quot; ... ## $ Season : chr &quot;Summer&quot; &quot;Summer&quot; &quot;Autumn&quot; &quot;Autumn&quot; ... ## $ N_days : int 4 1 4 2 1 1 2 1 2 2 ... ## $ Species : chr &quot;Coluberhippocrepis&quot; &quot;Elaphescalaris&quot; &quot;Elaphescalaris&quot; &quot;Elaphescalaris&quot; ... ## $ Road_Loc: chr &quot;L&quot; &quot;L&quot; &quot;L&quot; &quot;L&quot; ... ## $ Size_cm : int 115 150 150 150 150 150 150 150 150 150 ... ## $ PDayRain: num 0.75 0 1 1 0 0 0 0 0 0 ... ## $ Tot_Rain: num 15 0 40.2 35.6 0 0 0 0 0 0 ... ## $ Temp_avg: num 24.6 27.4 19.1 17.8 22.3 22.3 19.7 19.9 19.4 19.4 ... plot(table(serp$N_days)) mean(serp$N_days) ## [1] 2.2 pairs(serp[, c(&quot;PDayRain&quot;, &quot;Tot_Rain&quot;, &quot;Temp_avg&quot;)]) round(cor(serp[, c(&quot;PDayRain&quot;, &quot;Tot_Rain&quot;, &quot;Temp_avg&quot;)]), 2) ## PDayRain Tot_Rain Temp_avg ## PDayRain 1.00 0.42 -0.5 ## Tot_Rain 0.42 1.00 -0.3 ## Temp_avg -0.50 -0.30 1.0 boxplot(serp$PDayRain ~ serp$Season) boxplot(serp$Tot_Rain ~ serp$Season) boxplot(serp$Temp_avg ~ serp$Season) 2.6.1.1 Comparación con el GLM Poisson m.pois &lt;- glm(N_days ~ Size_cm + PDayRain + Tot_Rain + Road + Size_cm + Road_Loc + Size_cm:PDayRain, family = poisson, data = serp) summary(m.pois) ## ## Call: ## glm(formula = N_days ~ Size_cm + PDayRain + Tot_Rain + Road + ## Size_cm + Road_Loc + Size_cm:PDayRain, family = poisson, ## data = serp) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -2.0869 -0.7901 -0.4193 0.2448 5.9495 ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) -0.114527 0.463263 -0.247 0.804739 ## Size_cm 0.004782 0.002965 1.613 0.106848 ## PDayRain 0.957714 0.768545 1.246 0.212713 ## Tot_Rain 0.022763 0.003797 5.994 2.04e-09 *** ## RoadEN370_EN114_4 -0.146154 0.172785 -0.846 0.397626 ## RoadEN4 -0.352271 0.147973 -2.381 0.017282 * ## Road_LocV 0.530610 0.158214 3.354 0.000797 *** ## Size_cm:PDayRain -0.006869 0.005161 -1.331 0.183215 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for poisson family taken to be 1) ## ## Null deviance: 226.38 on 129 degrees of freedom ## Residual deviance: 166.85 on 122 degrees of freedom ## AIC: 498.68 ## ## Number of Fisher Scoring iterations: 5 2.6.1.2 GLM Poisson truncado en cero library(VGAM) m.pois.trun &lt;- vglm(N_days ~ Size_cm + PDayRain + Tot_Rain + Road + Size_cm + Road_Loc + Size_cm:PDayRain, family = pospoisson, control = vglm.control(maxit = 100), data = serp) summary(m.pois.trun) ## ## Call: ## vglm(formula = N_days ~ Size_cm + PDayRain + Tot_Rain + Road + ## Size_cm + Road_Loc + Size_cm:PDayRain, family = pospoisson, ## data = serp, control = vglm.control(maxit = 100)) ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) -1.214880 0.764099 -1.590 0.11185 ## Size_cm 0.009725 0.004830 2.014 0.04406 * ## PDayRain 1.782494 1.097674 1.624 0.10440 ## Tot_Rain 0.028863 0.004270 6.760 1.38e-11 *** ## RoadEN370_EN114_4 -0.217333 0.225081 -0.966 0.33425 ## RoadEN4 -0.558705 0.181936 -3.071 0.00213 ** ## Road_LocV 0.811896 0.200842 4.042 5.29e-05 *** ## Size_cm:PDayRain -0.012131 0.007245 -1.674 0.09404 . ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Name of linear predictor: loglink(lambda) ## ## Log-likelihood: -211.1832 on 122 degrees of freedom ## ## Number of Fisher scoring iterations: 5 ## ## No Hauck-Donner effect found in any of the estimates 2.6.1.3 GLM binomial negativo truncado en cero m.nb.trun &lt;- vglm(N_days ~ Size_cm + PDayRain + Tot_Rain + Road + Size_cm + Road_Loc + Size_cm:PDayRain, family = posnegbinomial, control = vglm.control(maxit = 100), data = serp) ## Warning in slot(family, &quot;linkinv&quot;)(eta, extra = extra): estimates of &#39;size&#39; are very ## small. Taking evasive action. ## Warning in slot(family, &quot;validparams&quot;)(eta, y = y, extra = extra): parameter &#39;size&#39; has ## very large values relative to &#39;munb&#39;; try fitting a positive-Poisson model instead. ## Warning in eval(slot(family, &quot;deriv&quot;)): solution near the boundary; either there is no ## need to fit a positive NBD or the distribution is centred on the value 1 ## Warning in slot(family, &quot;validparams&quot;)(eta, y, extra = extra): parameter &#39;size&#39; has very ## large values relative to &#39;munb&#39;; try fitting a positive-Poisson model instead. ## Warning in vglm.fitter(x = x, y = y, w = w, offset = offset, Xm2 = Xm2, : iterations ## terminated because half-step sizes are very small ## Warning in vglm.fitter(x = x, y = y, w = w, offset = offset, Xm2 = Xm2, : some quantities ## such as z, residuals, SEs may be inaccurate due to convergence at a half-step summary(m.nb.trun) ## Warning in eval(expr): solution near the boundary; either there is no need to fit a ## positive NBD or the distribution is centred on the value 1 ## Warning in eval(expr): solution near the boundary; either there is no need to fit a ## positive NBD or the distribution is centred on the value 1 ## Warning in eval(expr): solution near the boundary; either there is no need to fit a ## positive NBD or the distribution is centred on the value 1 ## Warning in eval(expr): solution near the boundary; either there is no need to fit a ## positive NBD or the distribution is centred on the value 1 ## Warning in eval(expr): solution near the boundary; either there is no need to fit a ## positive NBD or the distribution is centred on the value 1 ## Warning in eval(expr): solution near the boundary; either there is no need to fit a ## positive NBD or the distribution is centred on the value 1 ## Warning in eval(expr): solution near the boundary; either there is no need to fit a ## positive NBD or the distribution is centred on the value 1 ## Warning in eval(expr): solution near the boundary; either there is no need to fit a ## positive NBD or the distribution is centred on the value 1 ## Warning in eval(expr): solution near the boundary; either there is no need to fit a ## positive NBD or the distribution is centred on the value 1 ## Warning in eval(expr): solution near the boundary; either there is no need to fit a ## positive NBD or the distribution is centred on the value 1 ## Warning in eval(expr): solution near the boundary; either there is no need to fit a ## positive NBD or the distribution is centred on the value 1 ## Warning in eval(expr): solution near the boundary; either there is no need to fit a ## positive NBD or the distribution is centred on the value 1 ## Warning in eval(expr): solution near the boundary; either there is no need to fit a ## positive NBD or the distribution is centred on the value 1 ## Warning in eval(expr): solution near the boundary; either there is no need to fit a ## positive NBD or the distribution is centred on the value 1 ## Warning in eval(expr): solution near the boundary; either there is no need to fit a ## positive NBD or the distribution is centred on the value 1 ## Warning in eval(expr): solution near the boundary; either there is no need to fit a ## positive NBD or the distribution is centred on the value 1 ## Warning in eval(expr): solution near the boundary; either there is no need to fit a ## positive NBD or the distribution is centred on the value 1 ## Warning in eval(expr): solution near the boundary; either there is no need to fit a ## positive NBD or the distribution is centred on the value 1 ## Warning in eval(expr): solution near the boundary; either there is no need to fit a ## positive NBD or the distribution is centred on the value 1 ## ## Call: ## vglm(formula = N_days ~ Size_cm + PDayRain + Tot_Rain + Road + ## Size_cm + Road_Loc + Size_cm:PDayRain, family = posnegbinomial, ## data = serp, control = vglm.control(maxit = 100)) ## ## Coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept):1 -18.650956 9.622924 NA NA ## (Intercept):2 -19.201942 0.087878 -218.508 &lt;2e-16 *** ## Size_cm 0.006975 0.062006 0.112 0.910 ## PDayRain 1.196235 18.692101 0.064 0.949 ## Tot_Rain 0.067164 0.117128 0.573 0.566 ## RoadEN370_EN114_4 -0.276550 4.059935 -0.068 0.946 ## RoadEN4 -0.558499 3.643634 -0.153 0.878 ## Road_LocV 1.072722 3.817984 0.281 0.779 ## Size_cm:PDayRain -0.009605 0.126436 -0.076 0.939 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Names of linear predictors: loglink(munb), loglink(size) ## ## Log-likelihood: -186.7285 on 251 degrees of freedom ## ## Number of Fisher scoring iterations: 3 ## ## Warning: Hauck-Donner effect detected in the following estimate(s): ## &#39;(Intercept):1&#39; 2.6.1.4 Comparación de coeficientes entre modelos data.frame(coef.Poisson = summary(m.pois)$coeff[, 1], coef.Poisson.truncado = summary(m.pois.trun)@coef3[, 1]) ## coef.Poisson coef.Poisson.truncado ## (Intercept) -0.114527460 -1.214879652 ## Size_cm 0.004781715 0.009724801 ## PDayRain 0.957714141 1.782494406 ## Tot_Rain 0.022763117 0.028863331 ## RoadEN370_EN114_4 -0.146153654 -0.217333044 ## RoadEN4 -0.352270790 -0.558704924 ## Road_LocV 0.530609962 0.811896312 ## Size_cm:PDayRain -0.006868709 -0.012131485 2.6.2 Modelos inflados en ceros Hemmingsen et al. (2005) analizaron las infecciones por Trypanosoma en bacalaos (Gadus morhua) durante cruceros anuales en la costa norte de Noruega (ParasiteCod.txt). La variable respuesta es la prevalencia de parásitos (Prevalence). Posibles variables explicatorias son el año (Year), el área (Area) y la profundidad de captura (Depth). # Análisis exploratorio parasitos &lt;- read.table(&quot;ParasiteCod.txt&quot;, header = T) str(parasitos) ## &#39;data.frame&#39;: 1254 obs. of 11 variables: ## $ Sample : int 1 2 3 4 5 6 7 8 9 10 ... ## $ Intensity : int 0 0 0 0 0 0 0 0 0 0 ... ## $ Prevalence: int 0 0 0 0 0 0 0 0 0 0 ... ## $ Year : int 1999 1999 1999 1999 1999 1999 1999 1999 1999 1999 ... ## $ Depth : int 220 220 220 220 220 220 220 194 194 194 ... ## $ Weight : int 148 144 146 138 40 68 52 3848 2576 1972 ... ## $ Length : int 26 26 27 26 17 20 19 77 67 60 ... ## $ Sex : int 0 0 0 0 0 0 0 0 0 0 ... ## $ Stage : int 0 0 0 0 0 0 0 0 0 0 ... ## $ Age : int 0 0 0 0 0 0 0 0 0 0 ... ## $ Area : int 2 2 2 2 2 2 2 3 3 3 ... plot(table(parasitos$Intensity)) table(parasitos$Intensity)[1] # Número de ceros observados ## 0 ## 654 # Ajuste de distribución a los datos xIntensity &lt;- mean(parasitos$Intensity, na.rm = TRUE) sim.pois &lt;- dpois(x = 0:max(parasitos$Intensity, na.rm = TRUE), lambda = xIntensity) ndatos &lt;- length(na.omit(parasitos$Intensity)) random.sample.pois &lt;- rpois(n = ndatos, lambda = xIntensity) plot(table(random.sample.pois)) dpois(x = 0, lambda = xIntensity) # Probabilidad de observar un cero ## [1] 0.002064314 table(random.sample.pois) # Numero de ceros esperados ## random.sample.pois ## 1 2 3 4 5 6 7 8 9 10 11 12 13 ## 17 56 109 153 187 171 170 122 96 54 37 20 5 2.6.2.1 Modelos de dos partes o valla (ZAP y ZANB) # La primera parte de la formula contiene las covariables para el proceso de conteo, la segunda parte contiene las covariables para la probabilidad de los falsos ceros. library(pscl) ZAP &lt;- hurdle(Intensity ~ Depth | Length + Depth, dist = &quot;poisson&quot;, link = &quot;logit&quot;, data = parasitos) summary(ZAP) ## ## Call: ## hurdle(formula = Intensity ~ Depth | Length + Depth, data = parasitos, dist = &quot;poisson&quot;, ## link = &quot;logit&quot;) ## ## Pearson residuals: ## Min 1Q Median 3Q Max ## -1.3420 -0.8995 -0.6450 -0.2622 32.6701 ## ## Count model coefficients (truncated poisson with log link): ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 1.7740079 0.0412390 43.02 &lt;2e-16 *** ## Depth 0.0041351 0.0001857 22.27 &lt;2e-16 *** ## Zero hurdle model coefficients (binomial with logit link): ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) -1.6523797 0.2870146 -5.757 8.56e-09 *** ## Length 0.0039426 0.0042165 0.935 0.35 ## Depth 0.0070509 0.0008584 8.214 &lt; 2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Number of iterations in BFGS optimization: 10 ## Log-likelihood: -8542 on 5 Df ZANB &lt;- hurdle(Intensity ~ Depth | Length + Depth, dist = &quot;negbin&quot;, link = &quot;logit&quot;, data = parasitos) summary(ZANB) ## ## Call: ## hurdle(formula = Intensity ~ Depth | Length + Depth, data = parasitos, dist = &quot;negbin&quot;, ## link = &quot;logit&quot;) ## ## Pearson residuals: ## Min 1Q Median 3Q Max ## -0.4350 -0.3729 -0.3281 -0.1126 16.3175 ## ## Count model coefficients (truncated negbin with log link): ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) -0.415345 0.844211 -0.492 0.622725 ## Depth 0.006271 0.001537 4.080 4.51e-05 *** ## Log(theta) -3.019216 0.867902 -3.479 0.000504 *** ## Zero hurdle model coefficients (binomial with logit link): ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) -1.6523797 0.2870146 -5.757 8.56e-09 *** ## Length 0.0039426 0.0042165 0.935 0.35 ## Depth 0.0070509 0.0008584 8.214 &lt; 2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Theta: count = 0.0488 ## Number of iterations in BFGS optimization: 16 ## Log-likelihood: -2559 on 6 Df 2.6.2.2 Comparación de ZAP y ZANB library(lmtest) lrtest(ZAP, ZANB) # Test de razón de verosimilitud ## Likelihood ratio test ## ## Model 1: Intensity ~ Depth | Length + Depth ## Model 2: Intensity ~ Depth | Length + Depth ## #Df LogLik Df Chisq Pr(&gt;Chisq) ## 1 5 -8542.3 ## 2 6 -2559.4 1 11966 &lt; 2.2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 AIC(ZAP, ZANB) ## df AIC ## ZAP 5 17094.58 ## ZANB 6 5130.85 2.6.2.3 Validación resid &lt;- residuals(ZANB, type = &quot;pearson&quot;) plot(resid, predict(ZANB), xlab = &quot;Residuos&quot;, ylab = &quot;Predichos&quot;) 2.6.2.4 Interpretación y gráficos del modelo # Proceso de falsos ceros Depth &lt;- seq(min(parasitos$Depth), max(parasitos$Depth), length = 500) Length &lt;- mean(parasitos$Length, na.rm = TRUE) zero.model.coef &lt;- ZANB$coefficients$zero # Coeficientes u &lt;- zero.model.coef[1] + Length*zero.model.coef[2] + Depth*zero.model.coef[3] zero.model.pred &lt;- exp(u)/(1 + exp(u)) # Predicciones parasitos$ceros &lt;- ifelse(parasitos$Intensity == 0, 0, 1) # Ceros vs no ceros plot(parasitos$Depth, parasitos$ceros, pch = 19, xlab = &quot;Profundidad&quot;, ylab = &quot;Probabilidad de obtener un cero&quot;) lines(Depth, zero.model.pred, col = &quot;blue&quot;, lwd = 2.5, main = &quot;ZANB&quot;) # Proceso de conteo count.model.coef &lt;- ZANB$coefficients$count # Coeficientes u &lt;- count.model.coef[1] + Depth*count.model.coef[2] count.model.pred &lt;- exp(u) # Predicciones plot(parasitos$Depth, parasitos$Intensity, pch = 19, xlab = &quot;Profundidad&quot;, ylab = &quot;Prevalencia&quot;) lines(Depth, count.model.pred, col = &quot;blue&quot;, lwd = 2) 2.6.2.5 GLMs de mezcla (ZIP y ZINB) library(pscl) # La primera parte de la fórmula contiene las covariables para el proceso de conteo, la segunda parte contiene las covariables para la probabilidad de los falsos ceros. ZIP &lt;- zeroinfl(Intensity ~ Depth | Length + Depth, dist = &quot;poisson&quot;, link = &quot;logit&quot;, data = parasitos) summary(ZIP) ## ## Call: ## zeroinfl(formula = Intensity ~ Depth | Length + Depth, data = parasitos, dist = &quot;poisson&quot;, ## link = &quot;logit&quot;) ## ## Pearson residuals: ## Min 1Q Median 3Q Max ## -1.3420 -0.8995 -0.6450 -0.2622 32.6703 ## ## Count model coefficients (poisson with log link): ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 1.7740079 0.0412533 43.00 &lt;2e-16 *** ## Depth 0.0041351 0.0001857 22.27 &lt;2e-16 *** ## ## Zero-inflation model coefficients (binomial with logit link): ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 1.6523797 0.2870373 5.757 8.58e-09 *** ## Length -0.0039426 0.0042167 -0.935 0.35 ## Depth -0.0070509 0.0008585 -8.213 &lt; 2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Number of iterations in BFGS optimization: 1 ## Log-likelihood: -8542 on 5 Df ZINB &lt;- zeroinfl(Intensity ~ Depth | Length + Depth, dist = &quot;negbin&quot;, link = &quot;logit&quot;, data = parasitos) summary(ZINB) ## ## Call: ## zeroinfl(formula = Intensity ~ Depth | Length + Depth, data = parasitos, dist = &quot;negbin&quot;, ## link = &quot;logit&quot;) ## ## Pearson residuals: ## Min 1Q Median 3Q Max ## -0.45165 -0.44692 -0.33559 -0.07448 15.18154 ## ## Count model coefficients (negbin with log link): ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 0.868040 0.252504 3.438 0.000587 *** ## Depth 0.005512 0.001216 4.534 5.8e-06 *** ## Log(theta) -1.572514 0.058398 -26.927 &lt; 2e-16 *** ## ## Zero-inflation model coefficients (binomial with logit link): ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 6.25506 1.36666 4.577 4.72e-06 *** ## Length 0.03373 0.02168 1.556 0.12 ## Depth -0.08659 0.01519 -5.699 1.21e-08 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Theta = 0.2075 ## Number of iterations in BFGS optimization: 26 ## Log-likelihood: -2537 on 6 Df 2.6.2.6 Comparacion de ZIP y ZINB library(lmtest) lrtest(ZIP, ZINB) # Test de razón de verosimilitud ## Likelihood ratio test ## ## Model 1: Intensity ~ Depth | Length + Depth ## Model 2: Intensity ~ Depth | Length + Depth ## #Df LogLik Df Chisq Pr(&gt;Chisq) ## 1 5 -8542.3 ## 2 6 -2537.5 1 12010 &lt; 2.2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 2.6.2.7 Validación resid &lt;- residuals(ZINB, type = &quot;pearson&quot;) plot(resid, predict(ZINB), xlab = &quot;Residuos&quot;, ylab = &quot;Predichos&quot;) AIC(ZIP, ZINB) ## df AIC ## ZIP 5 17094.549 ## ZINB 6 5086.954 2.6.3 Interpretación y gráficos del modelo # Proceso de falsos ceros Depth &lt;- seq(min(parasitos$Depth), max(parasitos$Depth), length = 500) Length &lt;- mean(parasitos$Length, na.rm = TRUE) zero.model.coef &lt;- ZINB$coefficients$zero # Coeficientes u &lt;- zero.model.coef[1] + Length*zero.model.coef[2] + Depth*zero.model.coef[3] zero.model.pred &lt;- exp(u)/(1 + exp(u)) # Predicciones plot(Depth, zero.model.pred, col = &quot;blue&quot;, type = &quot;l&quot;, lwd = 3, xlab = &quot;Profundidad&quot;, ylab = &quot;Probabilidad de falso cero&quot;) # Proceso de conteo count.model.coef &lt;- ZINB$coefficients$count # Coeficientes u &lt;- count.model.coef[1] + Depth*count.model.coef[2] count.model.pred &lt;- exp(u) # Predicciones plot(Depth, count.model.pred, col = &quot;blue&quot;, type = &quot;l&quot;, lwd = 3, xlab = &quot;Profundidad&quot;, ylab = &quot;Numero de parasitos&quot;) 2.7 Inferencia multimodelo Cabral et al. (2007) estudiaron la distribución de platijas (Solea solea) en el estuario Tagus, Portugal (Solea.txt). Se desea saber qué factores del agua y sustrato están relacionados con la presencia esta especie. # Análisis exploratorio datos &lt;- read.table(&quot;Solea.txt&quot;, header = TRUE) str(datos) ## &#39;data.frame&#39;: 65 obs. of 13 variables: ## $ Sample : int 1 2 3 4 5 6 7 8 9 10 ... ## $ season : int 1 1 1 1 1 1 1 1 1 1 ... ## $ month : int 5 5 5 5 5 5 5 5 5 5 ... ## $ Area : int 2 2 2 4 4 4 3 3 3 1 ... ## $ depth : num 3 2.6 2.6 2.1 3.2 3.5 1.6 1.7 1.8 4.5 ... ## $ temperature : int 20 18 19 20 20 20 19 17 19 21 ... ## $ salinity : int 30 29 30 29 30 32 29 28 29 12 ... ## $ transparency : int 15 15 15 15 15 7 15 10 10 35 ... ## $ gravel : num 3.74 1.94 2.88 11.06 9.87 ... ## $ large_sand : num 13.15 4.99 8.98 11.96 28.6 ... ## $ med_fine_sand: num 11.93 5.43 16.85 21.95 19.49 ... ## $ mud : num 71.2 87.6 71.3 55 42 ... ## $ Solea_solea : int 0 0 1 0 0 0 1 1 0 1 ... round(cor(datos[, 4:12]), 2) ## Area depth temperature salinity transparency gravel large_sand ## Area 1.00 -0.55 -0.18 0.76 -0.56 0.44 -0.44 ## depth -0.55 1.00 0.14 -0.66 0.57 -0.24 0.31 ## temperature -0.18 0.14 1.00 -0.35 0.54 -0.16 0.12 ## salinity 0.76 -0.66 -0.35 1.00 -0.66 0.38 -0.54 ## transparency -0.56 0.57 0.54 -0.66 1.00 -0.25 0.37 ## gravel 0.44 -0.24 -0.16 0.38 -0.25 1.00 0.01 ## large_sand -0.44 0.31 0.12 -0.54 0.37 0.01 1.00 ## med_fine_sand -0.69 0.67 0.25 -0.80 0.69 -0.32 0.56 ## mud 0.49 -0.47 -0.16 0.63 -0.52 -0.19 -0.87 ## med_fine_sand mud ## Area -0.69 0.49 ## depth 0.67 -0.47 ## temperature 0.25 -0.16 ## salinity -0.80 0.63 ## transparency 0.69 -0.52 ## gravel -0.32 -0.19 ## large_sand 0.56 -0.87 ## med_fine_sand 1.00 -0.78 ## mud -0.78 1.00 2.7.0.1 Modelos candidatos # modelo nulo m1 &lt;- glm(Solea_solea ~ 1, family = binomial, data = datos) # modelo de temperatura m2 &lt;- glm(Solea_solea ~ temperature, family = binomial, data = datos) # modelo de salinidad m3 &lt;- glm(Solea_solea ~ salinity, family = binomial, data = datos) # modelo de transparencia m4 &lt;- glm(Solea_solea ~ transparency, family = binomial, data = datos) # modelo de profundidad m5 &lt;- glm(Solea_solea ~ depth, family = binomial, data = datos) # modelo caracteristicas del agua m6 &lt;- glm(Solea_solea ~ temperature + salinity + transparency, family = binomial, data = datos) # Modelo ubicacion en el espacio m7 &lt;- glm(Solea_solea ~ Area + depth + Area:depth, family = binomial, data = datos) # Modelo de caracteristicas del sutrato m8 &lt;- glm(Solea_solea ~ gravel + large_sand + med_fine_sand, family = binomial, data = datos) # Modelo de caracteristicas del sustrato grueso m9 &lt;- glm(Solea_solea ~ gravel + large_sand, family = binomial, data = datos) # Modelo de caracteristicas del sustrato fino m10 &lt;- glm(Solea_solea ~ med_fine_sand, family = binomial, data = datos) # Modelo de profundidad y sustrato m11 &lt;- glm(Solea_solea ~ depth + gravel + large_sand + med_fine_sand, family = binomial, data = datos) 2.7.1 Selección de modelos library(MuMIn) modelos &lt;- list(m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11) ranking.modelos &lt;- model.sel(modelos, rank = &quot;AICc&quot;) ranking.modelos ## Model selection table ## (Int) tmp sln trn dpt Are Are:dpt grv lrg_snd med_fin_snd ## 7 -1.4470 1.0730 0.5759 -0.6021 ## 3 2.6610 -0.1299 ## 6 5.2220 -0.1005 -0.1427 -0.001162 ## 5 -2.3250 0.6152 ## 10 -1.5180 0.052640 ## 11 -3.0370 0.5575 0.008671 0.04312 -0.001628 ## 4 -1.5410 0.043430 ## 8 -1.9980 0.011060 0.03151 0.041010 ## 9 -1.3880 -0.014340 0.05502 ## 1 -0.4055 ## 2 -2.6330 0.1006 ## family df logLik AICc delta weight ## 7 binomial(logit) 4 -31.977 72.6 0.00 0.474 ## 3 binomial(logit) 2 -34.280 72.8 0.13 0.444 ## 6 binomial(logit) 4 -33.987 76.6 4.02 0.064 ## 5 binomial(logit) 2 -38.071 80.3 7.72 0.010 ## 10 binomial(logit) 2 -39.388 83.0 10.35 0.003 ## 11 binomial(logit) 5 -36.156 83.3 10.71 0.002 ## 4 binomial(logit) 2 -40.002 84.2 11.58 0.001 ## 8 binomial(logit) 4 -38.381 85.4 12.81 0.001 ## 9 binomial(logit) 3 -39.864 86.1 13.50 0.001 ## 1 binomial(logit) 1 -43.746 89.6 16.93 0.000 ## 2 binomial(logit) 2 -43.316 90.8 18.20 0.000 ## Models ranked by AICc(x) plot(1:length(modelos), ranking.modelos$delta, pch = 19, xlab = &quot;Modelo&quot;, ylab = expression(Delta ~ &quot;AICc&quot;)) abline(a = 2, b = 0, lty = 2) 2.7.2 Promediado de modelos modelo.promedio &lt;- model.avg(ranking.modelos, subset = delta &lt; 2) summary(modelo.promedio) ## ## Call: ## model.avg(object = ranking.modelos, subset = delta &lt; 2) ## ## Component model call: ## glm(formula = &lt;2 unique values&gt;, family = binomial, data = datos) ## ## Component models: ## df logLik AICc delta weight ## 234 4 -31.98 72.62 0.00 0.52 ## 1 2 -34.28 72.75 0.13 0.48 ## ## Term codes: ## salinity depth Area Area:depth ## 1 2 3 4 ## ## Model-averaged coefficients: ## (full average) ## Estimate Std. Error Adjusted SE z value Pr(&gt;|z|) ## (Intercept) 0.53879 2.60505 2.62506 0.205 0.837 ## Area 0.29744 0.75111 0.76410 0.389 0.697 ## depth 0.55409 0.68398 0.68935 0.804 0.422 ## Area:depth -0.31101 0.41353 0.41749 0.745 0.456 ## salinity -0.06278 0.06929 0.06946 0.904 0.366 ## ## (conditional average) ## Estimate Std. Error Adjusted SE z value Pr(&gt;|z|) ## (Intercept) 0.53879 2.60505 2.62506 0.205 0.837378 ## Area 0.57586 0.96536 0.98489 0.585 0.558752 ## depth 1.07273 0.59108 0.60304 1.779 0.075260 . ## Area:depth -0.60213 0.39469 0.40268 1.495 0.134837 ## salinity -0.12985 0.03494 0.03562 3.645 0.000267 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 importance(modelo.promedio) ## depth Area Area:depth salinity ## Sum of weights: 0.52 0.52 0.52 0.48 ## N containing models: 1 1 1 1 2.7.3 Gráfico del modelo promedio model.coeff &lt;- data.frame(estimate = modelo.promedio$coefficients[1,]) CI &lt;- as.data.frame(confint(modelo.promedio, full = TRUE)) model.coeff$CI.min &lt;- CI$`2.5 %` model.coeff$CI.max &lt;- CI$`97.5 %` model.coeff$coef &lt;- rownames(model.coeff) ggplot(data = model.coeff[2:5, ], aes(x = coef, y = estimate)) + theme_classic(base_size = 20) + geom_pointrange(aes(ymin = CI.min, ymax = CI.max), size = 1, color = &quot;coral&quot;) + xlab(&quot;Predictor&quot;) + ylab(&quot;Estimado&quot;) + geom_hline(yintercept = 0, linetype = &quot;dashed&quot;, color = &quot;gray&quot;) 2.8 Actividades 2.8.1 Ejercicio 3.1 Los datos del archivo gala.xls corresponden a un estudio donde se relevó la diversidad de especies de tortugas de las Islas Galápagos. De cada isla se obtuvo la riqueza de especies (Species), el área (Area), la altitud (Elevation), la distancia a la isla más cercana (Nearest), la distancia a la isla Santa Cruz (Scruz) y el área de la isla más cercana (Adjacent). Construya un modelo adecuado que relacione el número de especies endémicas (Endemics) con las variables medidas y analice su poder explicativo. Realice uno o más gráficos que representen el modelo ajustado. Debido a disponibilidad presupuestaria, sólo se podrán concentrar esfuerzos de conservación en islas con un alto número de especies endémicas (&gt;80). ¿A partir de qué valor de elevación el modelo predice más de 25 especies endémicas? Para esto considere valores constantes en el resto de las covariables incluidas en su modelo. 2.8.2 Ejercicio 3.2 Radim et al. (2015) analizaron la ocurrencia de muérdagos (Loranthus europaeus) en robles de República Checa, teniendo en cuenta el área basal (basal_area), el número de tallos (Number_of_stems), el área basal promedio de los tallos (mean_stem_basal_area), la competencia con árboles infectados basada en el índice de Hegyi (CI_stem) y el rango de los multicaules en ciertas direcciones (Xrange, Yrange y RangeAvg) (https://doi.org/10.1371/journal.pone.0127055). El conjunto de datos corresponde al archivo Matula_mistletoes_csv. Encontrar un modelo que mejor explique la probabilidad de infección por muérdagos (infected) en robles. Construya una o más tablas que muestren los resultados principales. Realice uno o más gráficos que represente el modelo ajustado. 2.8.3 Ejercicio 3.3 Tomando como base el conjunto de datos parasitos.txt y el modelo ZAP (de dos partes o valla) ajustado, ajuste un modelo ZAP con los mismos predictores pero de forma manual. Para esto, considere utilizar dos GLMs por separado: uno para la probabilidad de obtener un cero, y otro para la distribución de los conteos. Compare los resultados con el modelo obtenido con la función hurdle (paquete pscl). 2.8.4 Ejercicio 3.4 Raventos et al. (2019) evaluaron la respuesta de rasgos de historia de vida a diferentes variables ambientales (mediante técnicas reconstructivas de otolitos) en varias especies de peces (https://doi.org/10.1111/1365-2656.13435). Para esto, se estimaron caracteres de historia de vida, incluyendo la duración larval pelágica (PLD), la tasa de crecimiento (Pre-settlement_growth), el tamaño de asentamiento (Size_of_settlement) y la fecha de puesta (Hatching_day_date). El conjunto de datos se encuentra en el archivo Raventos_etal_2021_JAE_data.txt. Analice qué factores determinan la respuesta de las tasas de crecimiento de dos especies considerando la temperatura de la superficie del agua (SST), la clorofila A mensual promedio en mg/m (ChLA) y la estación (Season). Compare los predictores de los modelos de cada especie ¿Cuál es más importante para cada una y en qué magnitud? "],["modelos-no-lineales.html", "3 Modelos no lineales 3.1 Regresión no paramétrica 3.2 Regresión polinómica 3.3 Funciones a trozos 3.4 Splines de regresión 3.5 Modelos aditivos generalizados 3.6 Actividades", " 3 Modelos no lineales 3.1 Regresión no paramétrica Se tomaron medidas del peso seco (peso.seco) y del largo (largo) de una especie de almeja (almejas.txt). Analizar la relación entre el largo y el peso seco. almejas &lt;- read.table(&quot;C:/RD/almejas.txt&quot;, header = TRUE) str(almejas) ## &#39;data.frame&#39;: 398 obs. of 3 variables: ## $ mes : int 11 11 11 11 11 11 11 11 11 11 ... ## $ largo : num 28.4 16.6 13.7 17.4 11.8 ... ## $ peso.seco: num 0.248 0.052 0.028 0.07 0.022 0.187 0.361 0.05 0.087 0.128 ... # opción 1 plot(almejas$largo, almejas$peso.seco, pch = 19, xlab = &quot;Largo&quot;, ylab = &quot;Peso&quot;) loess.model &lt;- loess(peso.seco ~ largo, data = almejas) largo &lt;- seq(min(almejas$largo), max(almejas$largo), length = 500) predPeso &lt;- predict(loess.model, newdata = data.frame(largo)) lines(largo, predPeso, col = &quot;blue&quot;, lwd = 2) # opción 2 library(car) scatterplot(peso.seco ~ largo, data = almejas, regLine = FALSE, smooth = TRUE) 3.2 Regresión polinómica # Simulamos dos variables set.seed(99) x &lt;- rnorm(500, mean = 0, sd = 1) y &lt;- 2 - x + 0.2*x^2 + x^3 + rnorm(500, 0, 2) plot(x, y) # Ajuste del modelo reg.pol &lt;- lm(y ~ x + I(x^2) + I(x^3)) anova(reg.pol) ## Analysis of Variance Table ## ## Response: y ## Df Sum Sq Mean Sq F value Pr(&gt;F) ## x 1 2270.96 2270.96 544.00 &lt; 2.2e-16 *** ## I(x^2) 1 86.04 86.04 20.61 7.076e-06 *** ## I(x^3) 1 2123.63 2123.63 508.70 &lt; 2.2e-16 *** ## Residuals 496 2070.59 4.17 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 summary(reg.pol) ## ## Call: ## lm(formula = y ~ x + I(x^2) + I(x^3)) ## ## Residuals: ## Min 1Q Median 3Q Max ## -6.3763 -1.3071 -0.1047 1.5228 6.9486 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 2.08920 0.11498 18.171 &lt; 2e-16 *** ## x -0.67260 0.15063 -4.465 9.91e-06 *** ## I(x^2) 0.12711 0.06716 1.893 0.059 . ## I(x^3) 0.93229 0.04134 22.554 &lt; 2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 2.043 on 496 degrees of freedom ## Multiple R-squared: 0.6839, Adjusted R-squared: 0.682 ## F-statistic: 357.8 on 3 and 496 DF, p-value: &lt; 2.2e-16 3.3 Funciones a trozos x.categorica &lt;- cut(x, breaks = 10) # Dividimos la variable en 10 intervalos fun.trozos &lt;- lm(y ~ x.categorica) summary(fun.trozos) ## ## Call: ## lm(formula = y ~ x.categorica) ## ## Residuals: ## Min 1Q Median 3Q Max ## -7.1982 -1.3038 -0.1617 1.4424 10.5097 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -16.1963 0.9759 -16.60 &lt;2e-16 *** ## x.categorica(-2.49,-1.93] 10.9342 1.1770 9.29 &lt;2e-16 *** ## x.categorica(-1.93,-1.37] 15.8749 1.0567 15.02 &lt;2e-16 *** ## x.categorica(-1.37,-0.809] 17.6050 1.0112 17.41 &lt;2e-16 *** ## x.categorica(-0.809,-0.247] 18.3686 0.9987 18.39 &lt;2e-16 *** ## x.categorica(-0.247,0.314] 18.7227 0.9993 18.73 &lt;2e-16 *** ## x.categorica(0.314,0.876] 18.1608 1.0046 18.08 &lt;2e-16 *** ## x.categorica(0.876,1.44] 18.8814 1.0193 18.52 &lt;2e-16 *** ## x.categorica(1.44,2] 21.3350 1.0656 20.02 &lt;2e-16 *** ## x.categorica(2,2.57] 28.9138 1.1484 25.18 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 2.182 on 490 degrees of freedom ## Multiple R-squared: 0.6438, Adjusted R-squared: 0.6373 ## F-statistic: 98.41 on 9 and 490 DF, p-value: &lt; 2.2e-16 pred &lt;- predict(fun.trozos) df &lt;- data.frame(x, x.categorica, y, pred) # Sin líneas verticales library(ggplot2) ggplot(data = df, aes(x, pred, group = x.categorica)) + geom_line(col = &quot;blue&quot;, size = 1) + geom_point(data = df, aes(x, y)) # Con líneas verticales ggplot(data = df, aes(x, pred)) + geom_step(col = &quot;blue&quot;, size = 1) + geom_point(data = df, aes(x, y)) 3.4 Splines de regresión 3.4.1 Polinomios a trozos # Ejemplo de un polinomio cúbico con 1 nodo data.split &lt;- data.frame(x, y, x2cat = cut(x, breaks = 2)) pol.cat1 &lt;- lm(y ~ x + I(x^2) + I(x^3), data = subset(data.split, x2cat == &quot;(-3.06,-0.247]&quot;)) pol.cat2 &lt;- lm(y ~ x + I(x^2) + I(x^3), data = subset(data.split, x2cat == &quot;(-0.247,2.57]&quot;)) pred.polcat1 &lt;- predict(pol.cat1) pred.polcat2 &lt;- predict(pol.cat2) df1 &lt;- data.frame(subset(data.split, x2cat == &quot;(-3.06,-0.247]&quot;), pred = pred.polcat1) df2 &lt;- data.frame(subset(data.split, x2cat == &quot;(-0.247,2.57]&quot;), pred = pred.polcat2) ggplot() + geom_line(data = df1, aes(x, pred), col = &quot;blue&quot;, size = 2) + geom_line(data = df2, aes(x, pred), col = &quot;red&quot;, size = 2) + geom_point(data = data.split, aes(x, y)) + geom_vline(xintercept = -0.247, linetype = &quot;dashed&quot;) # Comparación entre la regresión polinómica y splines de regresión library(splines) reg.pol &lt;- lm(y ~ poly(x, degree = 10)) plot(x, y, col = &quot;grey&quot;, ylim = c(-25, 30)) nodos &lt;- seq(-3, 2.5, length = 10) # Ubicación de los nodos spline.cub &lt;- lm(y ~ bs(x, degree = 3, knots = nodos)) # Spline cúbico spline.nat &lt;- lm(y ~ ns(x, knots = nodos)) # Spline natural # Gráficos de los modelos x.new &lt;- seq(min(x), max(x), length = 500) predP &lt;- predict(reg.pol, newdata = data.frame(x = x.new)) # regresión polinómica predC &lt;- predict(spline.cub, newdata = data.frame(x = x.new)) # spline cúbico predN &lt;- predict(spline.nat, newdata = data.frame(x = x.new)) # spline natural lines(x.new, predC, col = &quot;darkgreen&quot;, lwd = 3) lines(x.new, predP, col = &quot;red&quot;, lwd = 3) lines(x.new, predN, col = &quot;blue&quot;, lwd = 3) abline(v = nodos, lty = 2, col = &quot;darkgreen&quot;) legend(&quot;topleft&quot;, legend = c(&quot;Reg polinomica&quot;, &quot;Spline C&quot;, &quot;Spline N&quot;), col = c(&quot;darkgreen&quot;, &quot;red&quot;, &quot;blue&quot;), cex = 0.8, lty = 1) ## Splines de suavizado splines.suav &lt;- smooth.spline(x, y, nknots = 10) splines.suav.cv &lt;- smooth.spline(x, y, cv = TRUE) # lambda óptimo splines.suav.cv$df ## [1] 9.741308 predS &lt;- splines.suav$y predS.cv &lt;- splines.suav.cv$y layout(matrix(1:2, nrow = 1, ncol = 2)) plot(x, y, col = &quot;grey&quot;, ylim = c(-25, 30)) lines(x.new, predC, col = &quot;red&quot;, lwd = 3) # spline cúbico lines(x.new, predN, col = &quot;blue&quot;, lwd = 3) # spline natural legend(&quot;topleft&quot;, legend = c(&quot;Spline C&quot;, &quot;Spline N&quot;), col = c(&quot;red&quot;, &quot;blue&quot;), cex = 0.8, lty = 1, bty = &quot;n&quot;) plot(x, y, col = &quot;grey&quot;, ylim = c(-25, 30)) lines(sort(x), predS, col = &quot;red&quot;, lwd = 3) # spline de suavizado lines(sort(x), predS.cv, col = &quot;darkorchid&quot;, lwd = 3) legend(&quot;topleft&quot;, legend = c(&quot;Spline C k = 10&quot;, &quot;Spline C optimo&quot;), col = c(&quot;red&quot;, &quot;blue&quot;), cex = 0.8, lty = 1, bty = &quot;n&quot;) layout(1) 3.5 Modelos aditivos generalizados Gillibrand et al. (2007) analizaron la bioluminiscencia pelágica (Sources) a lo largo de un gradiente de profundidad (SampleDepth) en el NE del Océano Atlántico (ISIT.txt). library(lattice) library(ggplot2) library(mgcv) library(gratia) biolum &lt;- read.table(&quot;C:/RD/ISIT.txt&quot;, header = TRUE) str(biolum) ## &#39;data.frame&#39;: 789 obs. of 14 variables: ## $ SampleDepth : num 517 582 547 614 1068 ... ## $ Sources : num 28.7 27.9 23.4 18.3 12.4 ... ## $ Station : int 1 1 1 1 1 1 1 1 1 1 ... ## $ Time : int 3 3 3 3 3 3 3 3 3 3 ... ## $ Latitude : num 50.2 50.2 50.2 50.2 50.2 ... ## $ Longitude : num -14.5 -14.5 -14.5 -14.5 -14.5 ... ## $ Xkm : num -34.1 -34.1 -34.1 -34.1 -34.1 ... ## $ Ykm : num 16.8 16.8 16.8 16.8 16.8 ... ## $ Month : int 4 4 4 4 4 4 4 4 4 4 ... ## $ Year : int 2001 2001 2001 2001 2001 2001 2001 2001 2001 2001 ... ## $ BottomDepth : int 3939 3939 3939 3939 3939 3939 3939 3939 3939 3939 ... ## $ Season : int 1 1 1 1 1 1 1 1 1 1 ... ## $ Discovery : int 252 252 252 252 252 252 252 252 252 252 ... ## $ RelativeDepth: num 3422 3357 3392 3325 2871 ... biolum$Month &lt;- as.factor(biolum$Month) xyplot(Sources ~ SampleDepth|Month, data = biolum) # GAM con spline natural gam1 &lt;- lm(Sources ~ ns(SampleDepth, df = 5) + Month, data = biolum) # GAM con spline de suavizado (5 nodos) gam2 &lt;- gam(Sources ~ s(SampleDepth, k = 5, bs = &quot;cr&quot;) + Month, method = &quot;REML&quot;, data = biolum) # GAM con spline de suavizado (validación cruzada) gam3 &lt;- gam(Sources ~ s(SampleDepth, bs = &quot;cr&quot;) + Month, method = &quot;REML&quot;, data = biolum) summary(gam1) ## ## Call: ## lm(formula = Sources ~ ns(SampleDepth, df = 5) + Month, data = biolum) ## ## Residuals: ## Min 1Q Median 3Q Max ## -22.611 -3.938 -1.187 2.773 53.871 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 27.6560 1.1940 23.162 &lt; 2e-16 *** ## ns(SampleDepth, df = 5)1 -8.2891 1.3547 -6.119 1.49e-09 *** ## ns(SampleDepth, df = 5)2 -33.3891 1.6318 -20.462 &lt; 2e-16 *** ## ns(SampleDepth, df = 5)3 -19.1238 1.5363 -12.448 &lt; 2e-16 *** ## ns(SampleDepth, df = 5)4 -47.0388 2.8279 -16.634 &lt; 2e-16 *** ## ns(SampleDepth, df = 5)5 -27.4261 1.8643 -14.711 &lt; 2e-16 *** ## Month4 -0.6579 0.8180 -0.804 0.421 ## Month8 5.4249 0.6470 8.385 2.37e-16 *** ## Month10 6.3520 0.7025 9.042 &lt; 2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 6.842 on 780 degrees of freedom ## Multiple R-squared: 0.663, Adjusted R-squared: 0.6595 ## F-statistic: 191.8 on 8 and 780 DF, p-value: &lt; 2.2e-16 summary(gam2) ## ## Family: gaussian ## Link function: identity ## ## Formula: ## Sources ~ s(SampleDepth, k = 5, bs = &quot;cr&quot;) + Month ## ## Parametric coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 7.1165 0.5068 14.043 &lt;2e-16 *** ## Month4 0.8195 0.8403 0.975 0.33 ## Month8 5.7935 0.6787 8.536 &lt;2e-16 *** ## Month10 6.6598 0.7378 9.026 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Approximate significance of smooth terms: ## edf Ref.df F p-value ## s(SampleDepth) 3.51 3.855 309.3 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## R-sq.(adj) = 0.623 Deviance explained = 62.6% ## -REML = 2676.1 Scale est. = 51.787 n = 789 summary(gam3) ## ## Family: gaussian ## Link function: identity ## ## Formula: ## Sources ~ s(SampleDepth, bs = &quot;cr&quot;) + Month ## ## Parametric coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 7.4895 0.4611 16.243 &lt;2e-16 *** ## Month4 -0.6242 0.7879 -0.792 0.428 ## Month8 5.4546 0.6157 8.859 &lt;2e-16 *** ## Month10 6.5317 0.6695 9.755 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Approximate significance of smooth terms: ## edf Ref.df F p-value ## s(SampleDepth) 8.562 8.933 182.3 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## R-sq.(adj) = 0.692 Deviance explained = 69.6% ## -REML = 2611.8 Scale est. = 42.399 n = 789 # Gráficos del modelo SampleDepth &lt;- seq(min(biolum$SampleDepth), max(biolum$SampleDepth), length = 100) Month &lt;- as.factor(unique(biolum$Month)) newdata &lt;- expand.grid(SampleDepth = SampleDepth, Month = Month) newdata$pred_gam1 &lt;- predict(gam1, newdata = newdata) newdata$pred_gam2 &lt;- predict(gam2, newdata = newdata) newdata$pred_gam3 &lt;- predict(gam3, newdata = newdata) ggplot() + geom_point(data = biolum, aes(x = SampleDepth, y = Sources, color = Month)) + facet_wrap(~Month) + geom_line(data = newdata, aes(x = SampleDepth, y = pred_gam1), color = &quot;black&quot;) + geom_line(data = newdata, aes(x = SampleDepth, y = pred_gam2), color = &quot;blue&quot;) ggplot() + geom_point(data = biolum, aes(x = SampleDepth, y = Sources, color = Month)) + facet_wrap(~Month) + geom_line(data = newdata, aes(x = SampleDepth, y = pred_gam3), color = &quot;coral&quot;) draw(gam2) draw(gam3) 3.5.1 GAM con otras distribuciones e interacciones biolum$Sources_0.1 &lt;- biolum$Sources + 0.1 # Modelo sin interacción gam4 &lt;- gam(Sources_0.1 ~ s(SampleDepth, bs = &quot;cr&quot;) + Month, family = Gamma, method = &quot;REML&quot;, data = biolum) summary(gam4) ## ## Family: Gamma ## Link function: inverse ## ## Formula: ## Sources_0.1 ~ s(SampleDepth, bs = &quot;cr&quot;) + Month ## ## Parametric coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 0.436845 0.014114 30.951 &lt; 2e-16 *** ## Month4 0.006954 0.006530 1.065 0.287 ## Month8 -0.032625 0.004367 -7.471 2.14e-13 *** ## Month10 -0.029611 0.004283 -6.913 9.90e-12 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Approximate significance of smooth terms: ## edf Ref.df F p-value ## s(SampleDepth) 7.175 7.952 134.8 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## R-sq.(adj) = 0.594 Deviance explained = 81.6% ## -REML = 1942.5 Scale est. = 0.31488 n = 789 SampleDepth &lt;- seq(min(biolum$SampleDepth), 4000, length = 100) newdata &lt;- expand.grid(SampleDepth = SampleDepth, Month = Month) newdata$pred_gam4 &lt;- predict(gam4, newdata = newdata, type = &quot;response&quot;) ggplot() + geom_point(data = biolum, aes(x = SampleDepth, y = Sources, color = Month)) + facet_wrap(~Month) + geom_line(data = newdata, aes(x = SampleDepth, y = pred_gam4), color = &quot;black&quot;) draw(gam4) # Modelo con interacción (variable continua y categórica) gam5 &lt;- gam(Sources_0.1 ~ s(SampleDepth) + s(SampleDepth, by = Month, bs = &quot;cr&quot;), family = Gamma, method = &quot;REML&quot;, data = biolum) SampleDepth &lt;- seq(min(biolum$SampleDepth), 4000, length = 100) newdata &lt;- expand.grid(SampleDepth = SampleDepth, Month = Month) newdata$pred_gam5 &lt;- predict(gam5, newdata = newdata, type = &quot;response&quot;) ggplot() + geom_point(data = biolum, aes(x = SampleDepth, y = Sources, color = Month)) + facet_wrap(~Month) + geom_line(data = newdata, aes(x = SampleDepth, y = pred_gam5), color = &quot;black&quot;) # Modelo con interacción (2 variables continuas y una categórica) gam6 &lt;- gam(Sources_0.1 ~ s(SampleDepth) + s(BottomDepth) + s(SampleDepth, by = Month, bs = &quot;cr&quot;) + s(BottomDepth, by = Month), family = Gamma, method = &quot;REML&quot;, data = biolum) vis.gam(gam6, view = c(&quot;SampleDepth&quot;, &quot;BottomDepth&quot;), theta = 40, n.grid = 500, border = NA) 3.5.2 Comparación de modelos anova(gam4, gam5, test = &quot;F&quot;) ## Analysis of Deviance Table ## ## Model 1: Sources_0.1 ~ s(SampleDepth, bs = &quot;cr&quot;) + Month ## Model 2: Sources_0.1 ~ s(SampleDepth) + s(SampleDepth, by = Month, bs = &quot;cr&quot;) ## Resid. Df Resid. Dev Df Deviance F Pr(&gt;F) ## 1 776.82 235.36 ## 2 757.48 153.06 19.342 82.293 21.586 &lt; 2.2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 AIC(gam4, gam5) ## df AIC ## gam4 12.40166 3835.591 ## gam5 30.20737 3518.103 3.5.3 Validación gam.check(gam5) ## ## Method: REML Optimizer: outer newton ## full convergence after 18 iterations. ## Gradient range [-0.000865356,0.002459346] ## (score 1810.495 &amp; scale 0.1970945). ## Hessian positive definite, eigenvalue range [0.0008651971,416.9648]. ## Model rank = 45 / 46 ## ## Basis dimension (k) checking results. Low p-value (k-index&lt;1) may ## indicate that k is too low, especially if edf is close to k&#39;. ## ## k&#39; edf k-index p-value ## s(SampleDepth) 9.00 6.61 1.01 0.82 ## s(SampleDepth):Month3 9.00 7.59 1.01 0.80 ## s(SampleDepth):Month4 9.00 7.61 1.01 0.82 ## s(SampleDepth):Month8 9.00 1.01 1.01 0.80 ## s(SampleDepth):Month10 9.00 3.07 1.01 0.81 appraise(gam5, method = &quot;simulate&quot;) 3.5.4 Modelo con variables continuas (efectos principales + interacciones) Palacio et al. (2017) estudiaron el consumo de frutos por aves en Psychotria carthagenensis en un bosque secundario pedemontano de las Yungas (Psychotria_El_Corte_2012.txt). Se ajustó un GAM del número de infrutescencias (n.infrut) en función de las coordenadas (x = longitud, y = latitud). library(gratia) library(fields) psycho &lt;- read.table(&quot;C:/RD/Psychotria_El_Corte_2012.txt&quot;, header = TRUE) str(psycho) ## &#39;data.frame&#39;: 72 obs. of 14 variables: ## $ planta : chr &quot;A2-1&quot; &quot;A2-2&quot; &quot;A2-3&quot; &quot;A2-4&quot; ... ## $ celda : chr &quot;A2&quot; &quot;A2&quot; &quot;A2&quot; &quot;A2&quot; ... ## $ y : num 7036536 7036536 7036535 7036537 7036561 ... ## $ x : num 3566229 3566237 3566217 3566202 3566108 ... ## $ n.infrut : int 7 7 8 7 12 3 12 4 9 10 ... ## $ copa : num 1.18 1.47 1.29 1.26 1.79 1.17 1.63 0.85 1.26 1.26 ... ## $ vecino : num 0.58 0.31 0.52 0.6 0.66 0.98 1.5 0.2 0.65 0.71 ... ## $ x.diam : num 7.37 7.53 7.14 7.33 6.95 ... ## $ x.peso : num 0.27 0.29 0.248 0.275 0.204 0.134 0.27 0.184 0.29 0.227 ... ## $ x.az : num 9.85 12.4 10.45 11.05 11.1 ... ## $ x.pulpa : num 0.237 0.245 0.213 0.245 0.177 0.11 0.227 0.157 0.249 0.198 ... ## $ x.sem : num 0.033 0.044 0.035 0.03 0.027 0.029 0.042 0.027 0.041 0.029 ... ## $ p.a.visitas: int 0 0 0 0 0 0 0 0 0 0 ... ## $ frut.cons : int 0 0 0 0 0 0 0 0 0 0 ... hist(psycho$n.infrut, xlab = &quot;Numero de infrutescencias&quot;, ylab = &quot;Frecuencia&quot;) gam6 &lt;- gam(n.infrut ~ s(x, y), family = nb, method = &quot;REML&quot;, data = psycho) summary(gam6) ## ## Family: Negative Binomial(3.575) ## Link function: log ## ## Formula: ## n.infrut ~ s(x, y) ## ## Parametric coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 2.70250 0.06996 38.63 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Approximate significance of smooth terms: ## edf Ref.df Chi.sq p-value ## s(x,y) 10.75 14.2 42.44 0.000121 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## R-sq.(adj) = 0.277 Deviance explained = 48.5% ## -REML = 263.61 Scale est. = 1 n = 72 gam7 &lt;- gam(n.infrut ~ te(x, y), family = nb, method = &quot;REML&quot;, data = psycho) summary(gam7) ## ## Family: Negative Binomial(2.828) ## Link function: log ## ## Formula: ## n.infrut ~ te(x, y) ## ## Parametric coefficients: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 2.74392 0.07664 35.8 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Approximate significance of smooth terms: ## edf Ref.df Chi.sq p-value ## te(x,y) 6.132 7.822 24.71 0.0014 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## R-sq.(adj) = 0.151 Deviance explained = 31.5% ## -REML = 260.36 Scale est. = 1 n = 72 gam8 &lt;- Tps(x = data.frame(Latitud = psycho$x, Longitud = psycho$y), Y = psycho$n.infrut) # Superficies de respuesta draw(gam6) draw(gam7) vis.gam(gam6, color = &quot;terrain&quot;, type = &quot;response&quot;, plot.type = &quot;persp&quot;, theta = 40) surface(gam8) 3.6 Actividades 3.6.1 Ejercicio 4.1 Aluja et al. (2012) estudiaron los factores que determinan la dinámica poblacional de especies de moscas de la fruta (Tephritidae) durante 11 años en Veracruz, México (Aluja_et_al_Tephritidae.txt). Las variables utilizadas son el (log) número de capturas diarias (FTD) y el sesgo sexual de captura (SBC) de distintas especies del género Anastrepha y los índices de oscilación del Atlántico Norte (NAOI) y Sur (SOI). Grafique el tiempo vs las capturas para una de las especies de moscas y ajuste tres modelos LOESS (uno utilizando los argumentos por defecto, y otros dos variando la magnitud del ancho de ventana). Ajuste un GAM que relacione las capturas de la misma especie como función suave del tiempo y realice un gráfico de este modelo ¿Qué conclusión obtiene al compararlo con el LOESS? Identifique qué variables se relacionan con las capturas (considere también la posibilidad de incluir interacciones). Revise si el número de nodos es adecuado para el modelo ajustado (función gam.check). Construya una tabla que represente los resultados principales. Grafique el modelo como considere más conveniente para mostrar los resultados. ¿Qué conclusiones obtiene en términos biológicos? ¿Considera que este modelo cumple con los supuestos de un GAM? 3.6.2 Ejercicio 4.2 Palacio et al. (2017) estudiaron la selección mediada por aves sobre rasgos de los frutos en Psychotria carthagenensis en un bosque secundario pedemontano de las Yungas (Psychotria_El_Corte_2012.txt). Grafique la relación entre el número de frutos consumidos (frut.cons) y el número de infrutescencias (n.infrut). Ajuste un polinomio de grado n (que considere adecuado) y una función paso para capturar la relación entre ambas variables. Grafique ambos modelos. Ajuste un GAM para dicha relación y realice un gráfico del modelo. ¿Qué interpreta en términos biológicos? Si tuviera que elegir entre los tres modelos ¿Cuál utilizaría y por qué? 3.6.3 Ejercicio 4.3 Wingfield et al. (2017) estudiaron la dinámica espaciotemporal de Phocoena phocoena (Pinnipedia, Mammalia) en Maryland, Estados Unidos (https://doi.org/10.5061/dryad.25256). Se quiere establecer en que época del año es más frecuente detectarla. Para esto se realizaron muestreos durante 18 meses y se recolectó información sobre presencia-ausencia (DPH_Porp), hora (Hour_EST), día (Day_EST), mes (Month_EST) y año (Year). Utilice un modelo que describa la dinámica temporal anual de detecciones de la especie. Grafique el modelo como considere más conveniente para mostrar los resultados, e interprete en términos biológicos. Construya y grafique otro modelo que tenga en cuenta la proporción de detecciones por día en lugar de la presencia-ausencia. "],["modelos-mixtos.html", "4 Modelos mixtos 4.1 Dependencia temporal 4.2 Dependencia espacial 4.3 Introducción a los modelos mixtos 4.4 Un caso especial 4.5 Modelos lineales generalizados mixtos 4.6 Modelos mixtos con estructura espacial 4.7 Modelos mixtos con filogenia 4.8 Modelos aditivos generalizados mixtos 4.9 Actividades", " 4 Modelos mixtos 4.1 Dependencia temporal set.seed(101) tiempo &lt;- seq(1, 20, length = 30) a &lt;- 20 b &lt;- 5 c &lt;- 0.3 peso &lt;- a - (a - b)*exp(-c*tiempo) + rnorm(n = 30, mean = 0, sd = 0.5) plot(tiempo, peso) # Gráfico de residuos m.crec &lt;- lm(log(peso) ~ log(tiempo)) plot(log(tiempo), log(peso)) abline(m.crec, lwd = 2, col = &quot;blue&quot;) plot(log(tiempo), resid(m.crec), xlab = &quot;log(tiempo)&quot;, ylab = &quot;Residuos&quot;) # Función de autocorrelación plot(acf(peso)) 4.2 Dependencia espacial Ubicación (coordenadas) y concentración de metales pesados en el río Mosa (Europa). library(sp) library(gstat) library(ggplot2) data(meuse) coordinates(meuse) = ~x+y bubble(meuse, &quot;zinc&quot;, col = &quot;#00ff0088&quot;, main = &quot;zinc concentrations (ppm)&quot;) m.espacial &lt;- lm(zinc ~ x + y, data = meuse) plot(meuse$x, resid(m.espacial)) abline(a = 0, b = 0, lty = 2) plot(meuse$y, resid(m.espacial)) abline(a = 0, b = 0, lty = 2) data(meuse) meuse$residuos &lt;- resid(m.espacial) ggplot(meuse, aes(x = x, y = y, col = residuos)) + geom_point(size = 4) + scale_color_gradient(low = &quot;yellow&quot;, high = &quot;red&quot;) # Semivariograma coordinates(meuse) = ~x+y zinc.variog &lt;- variogram(zinc ~ 1, meuse) plot(zinc.variog) 4.3 Introducción a los modelos mixtos A partir de 8 plantas, se contaron el número de flores en 3 inflorescencias por planta y se midió la longitud de los pedicelos. Analizar la relación entre la longitud del pedicelo y el número de flores/inflorescencia. id &lt;- factor(sort(rep(1:8, 3))) long.pedicelo &lt;- c(1, 1.3, 1.4, 2, 2.2, 2.1, 2.9, 3, 2.8, 3.5, 3.4, 3.7, 4.5, 4.7, 4.7, 5.5, 5.7, 6, 7.2, 7.3, 7.5, 8.4, 8.8, 8.6) nflores &lt;- c(2, 2, 3, 4, 5, 4, 5, 6, 7, 8, 7, 10, 10, 12, 11, 11, 13, 12, 13, 11, 14, 14, 17, 15) plantas &lt;- data.frame(id, long.pedicelo, nflores) plantas ## id long.pedicelo nflores ## 1 1 1.0 2 ## 2 1 1.3 2 ## 3 1 1.4 3 ## 4 2 2.0 4 ## 5 2 2.2 5 ## 6 2 2.1 4 ## 7 3 2.9 5 ## 8 3 3.0 6 ## 9 3 2.8 7 ## 10 4 3.5 8 ## 11 4 3.4 7 ## 12 4 3.7 10 ## 13 5 4.5 10 ## 14 5 4.7 12 ## 15 5 4.7 11 ## 16 6 5.5 11 ## 17 6 5.7 13 ## 18 6 6.0 12 ## 19 7 7.2 13 ## 20 7 7.3 11 ## 21 7 7.5 14 ## 22 8 8.4 14 ## 23 8 8.8 17 ## 24 8 8.6 15 plot(plantas$long.pedicelo, plantas$nflores, pch = 19, cex = 2, xlab = &quot;Longitud del pedicelo&quot;, ylab = &quot;Número de flores&quot;) # Opción 1: asumimos que las observaciones son independientes m1 &lt;- lm(nflores ~ long.pedicelo, data = plantas) summary(m1) ## ## Call: ## lm(formula = nflores ~ long.pedicelo, data = plantas) ## ## Residuals: ## Min 1Q Median 3Q Max ## -2.7697 -0.9116 -0.1089 0.7718 2.6725 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 1.2973 0.5926 2.189 0.0395 * ## long.pedicelo 1.7085 0.1159 14.739 6.99e-13 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 1.368 on 22 degrees of freedom ## Multiple R-squared: 0.908, Adjusted R-squared: 0.9039 ## F-statistic: 217.2 on 1 and 22 DF, p-value: 6.986e-13 # Opción 2: una media por unidad xlong.pedicelo &lt;- tapply(long.pedicelo, id, mean) xnflores &lt;- tapply(nflores, id, mean) plot(xlong.pedicelo, xnflores, pch = 19, cex = 2) m2 &lt;- lm(xnflores ~ xlong.pedicelo) summary(m2) ## ## Call: ## lm(formula = xnflores ~ xlong.pedicelo) ## ## Residuals: ## Min 1Q Median 3Q Max ## -1.1378 -0.7432 -0.4178 0.9354 1.7874 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 1.3328 0.8834 1.509 0.182 ## xlong.pedicelo 1.7007 0.1729 9.837 6.36e-05 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 1.176 on 6 degrees of freedom ## Multiple R-squared: 0.9416, Adjusted R-squared: 0.9319 ## F-statistic: 96.78 on 1 and 6 DF, p-value: 6.359e-05 # Opción 3: incluir el efecto de la unidad m3 &lt;- lm(nflores ~ long.pedicelo + id, data = plantas) summary(m3) ## ## Call: ## lm(formula = nflores ~ long.pedicelo + id, data = plantas) ## ## Residuals: ## Min 1Q Median 3Q Max ## -1.5294 -0.4657 -0.1177 0.6667 1.4118 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -2.745 1.832 -1.498 0.1548 ## long.pedicelo 4.118 1.417 2.907 0.0108 * ## id2 -1.569 1.454 -1.079 0.2977 ## id3 -3.196 2.486 -1.286 0.2181 ## id4 -3.471 3.350 -1.036 0.3166 ## id5 -5.333 4.879 -1.093 0.2916 ## id6 -8.863 6.422 -1.380 0.1878 ## id7 -14.784 8.677 -1.704 0.1090 ## id8 -17.333 10.465 -1.656 0.1184 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.9538 on 15 degrees of freedom ## Multiple R-squared: 0.9695, Adjusted R-squared: 0.9533 ## F-statistic: 59.68 on 8 and 15 DF, p-value: 5.532e-10 # Opción 4: modelo mixto de intercepto aleatorio library(lme4) library(lmerTest) m4 &lt;- lmer(nflores ~ long.pedicelo + (1|id), data = plantas) summary(m4) ## Linear mixed model fit by REML. t-tests use Satterthwaite&#39;s method [&#39;lmerModLmerTest&#39;] ## Formula: nflores ~ long.pedicelo + (1 | id) ## Data: plantas ## ## REML criterion at convergence: 79.4 ## ## Scaled residuals: ## Min 1Q Median 3Q Max ## -1.8940 -0.4662 -0.1966 0.4627 1.6150 ## ## Random effects: ## Groups Name Variance Std.Dev. ## id (Intercept) 1.050 1.025 ## Residual 1.015 1.007 ## Number of obs: 24, groups: id, 8 ## ## Fixed effects: ## Estimate Std. Error df t value Pr(&gt;|t|) ## (Intercept) 1.1887 0.8804 6.0833 1.35 0.225 ## long.pedicelo 1.7326 0.1720 6.1198 10.07 4.91e-05 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Correlation of Fixed Effects: ## (Intr) ## long.pedicl -0.881 ranef(m4) ## $id ## (Intercept) ## 1 -0.7505424 ## 2 -0.3735793 ## 3 -0.1613717 ## 4 0.7734991 ## 5 1.3489226 ## 6 0.6637327 ## 7 -0.9288334 ## 8 -0.5718278 ## ## with conditional variances for &quot;id&quot; rand(m4) # Significancia de efectos aleatorios ## ANOVA-like table for random-effects: Single term deletions ## ## Model: ## nflores ~ long.pedicelo + (1 | id) ## npar logLik AIC LRT Df Pr(&gt;Chisq) ## &lt;none&gt; 4 -39.679 87.357 ## (1 | id) 3 -42.174 90.349 4.9912 1 0.02548 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 long.pedicelo.new &lt;- seq(min(plantas$long.pedicelo), max(plantas$long.pedicelo), length = 100) newdata &lt;- expand.grid(long.pedicelo.new, plantas$id) colnames(newdata) &lt;- c(&quot;long.pedicelo&quot;, &quot;id&quot;) newdata$predy.fixed &lt;- predict(m4, newdata = newdata, re.form = NA) newdata$predy.rand &lt;- predict(m4, newdata = newdata, re.form = NULL) ggplot(data = plantas, aes(x = long.pedicelo, y = nflores, col = id)) + geom_point(size = 2) + geom_line(data = newdata, aes(x = long.pedicelo, y = predy.rand)) + geom_line(data = newdata, aes(x = long.pedicelo, y = predy.fixed), col = &quot;black&quot;, size = 2) + ggtitle(&quot;Modelo de intercepto aleatorio&quot;) + xlab(&quot;Longitud del pedicelo&quot;) + ylab(&quot;Numero de flores&quot;) + theme_bw() # Opción 5: modelo mixto de intercepto y pendiente aleatorios m5 &lt;- lmer(nflores ~ long.pedicelo + (long.pedicelo|id), data = plantas) ## boundary (singular) fit: see ?isSingular summary(m5) ## Linear mixed model fit by REML. t-tests use Satterthwaite&#39;s method [&#39;lmerModLmerTest&#39;] ## Formula: nflores ~ long.pedicelo + (long.pedicelo | id) ## Data: plantas ## ## REML criterion at convergence: 77.1 ## ## Scaled residuals: ## Min 1Q Median 3Q Max ## -1.8626 -0.5465 -0.1193 0.5507 1.6903 ## ## Random effects: ## Groups Name Variance Std.Dev. Corr ## id (Intercept) 0.8215 0.9064 ## long.pedicelo 0.1895 0.4353 -1.00 ## Residual 0.9006 0.9490 ## Number of obs: 24, groups: id, 8 ## ## Fixed effects: ## Estimate Std. Error df t value Pr(&gt;|t|) ## (Intercept) 0.03828 0.66573 5.38487 0.057 0.956222 ## long.pedicelo 2.08596 0.21792 4.77122 9.572 0.000271 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Correlation of Fixed Effects: ## (Intr) ## long.pedicl -0.889 ## convergence code: 0 ## boundary (singular) fit: see ?isSingular ranef(m5) ## $id ## (Intercept) long.pedicelo ## 1 -0.20606623 0.098969626 ## 2 -0.02342207 0.011249167 ## 3 0.10951121 -0.052596116 ## 4 -0.82313657 0.395336576 ## 5 -0.86260770 0.414293794 ## 6 0.00184916 -0.000888116 ## 7 0.99686885 -0.478776830 ## 8 0.80700335 -0.387588101 ## ## with conditional variances for &quot;id&quot; rand(m5) ## ANOVA-like table for random-effects: Single term deletions ## ## Model: ## nflores ~ long.pedicelo + (long.pedicelo | id) ## npar logLik AIC LRT Df Pr(&gt;Chisq) ## &lt;none&gt; 6 -38.527 89.054 ## long.pedicelo in (long.pedicelo | id) 4 -39.679 87.357 2.303 2 0.3162 newdata$predy.fixed &lt;- predict(m5, newdata = newdata, re.form = NA) newdata$predy.rand &lt;- predict(m5, newdata = newdata, re.form = NULL) ggplot(data = plantas, aes(x = long.pedicelo, y = nflores, col = id)) + geom_point(size = 2) + ggtitle(&quot;Modelo de intercepto y pendiente aleatorios&quot;) + geom_line(data = newdata, aes(x = long.pedicelo, y = predy.rand)) + geom_line(data = newdata, aes(x = long.pedicelo, y = predy.fixed), col = &quot;black&quot;, size = 2) + xlab(&quot;Longitud del pedicelo&quot;) + ylab(&quot;Numero de flores&quot;) + theme_bw() 4.4 Un caso especial library(data.table) library(nlme) url &lt;- &quot;https://raw.githubusercontent.com/hauselin/rtutorialsite/master/data/simpsonsParadox.csv&quot; df &lt;- fread(url) head(df) ## iq grades class ## 1: 94.5128 67.9295 a ## 2: 95.4359 82.5449 a ## 3: 97.7949 69.0833 a ## 4: 98.1026 83.3141 a ## 5: 96.5641 99.0833 a ## 6: 101.5897 89.8526 a plot(df$grades, df$iq) model.class &lt;- lme(iq ~ grades, random = ~1|class, data = df) predy.fixed &lt;- predict(model.class, level = 0) ggplot(df, aes(grades, iq, col = class)) + geom_point(size = 2.5) + ggtitle(&quot;Paradoja de Simpson&quot;) + geom_smooth(method = &quot;lm&quot;, se = FALSE) + geom_line(data = data.frame(x = df$grades, y = predy.fixed), aes(x, y), col = &quot;black&quot;, size = 3) + theme_bw() ## `geom_smooth()` using formula &#39;y ~ x&#39; 4.5 Modelos lineales generalizados mixtos Palacio et al. (2014) estudiaron la selección natural mediada por aves frugívoras sobre rasgos de los frutos de Celtis tala (frutos Celtis 2013.txt), incluyendo el diametro (diam), peso (peso), concentración de azúcares (az), peso de pulpa (pulpa), peso de semilla (sem) y relación peso de pulpa/peso de semilla (pulpa.sem). Para esto se midieron 4-10 frutos por árbol en 24 árboles y 4 parches de bosque. 4.5.0.1 Diseño anidado library(glmmTMB) library(lme4) library(MuMIn) library(sjPlot) library(equatiomatic) celtis &lt;- read.delim(&quot;frutos Celtis 2013.csv&quot;, sep = &quot;;&quot;) table(celtis$planta) ## ## D1-145 D1-146 D1-147 D1-148 P1-10 P1-11 P1-12 P1-13 P1-2 P1-5(1) P1-5(2) ## 26 23 19 16 29 30 30 14 27 27 30 ## P1-7 P1-8 P1-9 P2-150 P2-151 P2-152 P2-153 P2-154 P2-155 P3-1 P3-2 ## 28 13 30 27 28 30 31 30 30 9 30 ## P3-6 P3-7 ## 30 30 table(celtis$planta, celtis$parche) # Es un diseño anidado? ## ## D1 P1 P2 P3 ## D1-145 26 0 0 0 ## D1-146 23 0 0 0 ## D1-147 19 0 0 0 ## D1-148 16 0 0 0 ## P1-10 0 29 0 0 ## P1-11 0 30 0 0 ## P1-12 0 30 0 0 ## P1-13 0 14 0 0 ## P1-2 0 27 0 0 ## P1-5(1) 0 27 0 0 ## P1-5(2) 0 30 0 0 ## P1-7 0 28 0 0 ## P1-8 0 13 0 0 ## P1-9 0 30 0 0 ## P2-150 0 0 27 0 ## P2-151 0 0 28 0 ## P2-152 0 0 30 0 ## P2-153 0 0 31 0 ## P2-154 0 0 30 0 ## P2-155 0 0 30 0 ## P3-1 0 0 0 9 ## P3-2 0 0 0 30 ## P3-6 0 0 0 30 ## P3-7 0 0 0 30 lmm.m0 &lt;- lm(sem ~ diam, data = celtis) lmm.m1 &lt;- glmmTMB(sem ~ diam + (1|planta), family = gaussian, data = celtis) lmm.m2 &lt;- glmmTMB(sem ~ diam + (1|parche/planta), family = gaussian, data = celtis) # Comparación de modelos AIC(lmm.m0, lmm.m1, lmm.m2) ## df AIC ## lmm.m0 3 -3832.245 ## lmm.m1 4 -4215.268 ## lmm.m2 5 -4214.188 r.squaredGLMM(lmm.m1) ## R2m R2c ## [1,] 0.3126432 0.6709598 summary(lmm.m1) ## Family: gaussian ( identity ) ## Formula: sem ~ diam + (1 | planta) ## Data: celtis ## ## AIC BIC logLik deviance df.resid ## -4215.3 -4197.6 2111.6 -4223.3 612 ## ## Random effects: ## ## Conditional model: ## Groups Name Variance Std.Dev. ## planta (Intercept) 5.899e-05 0.00768 ## Residual 5.417e-05 0.00736 ## Number of obs: 616, groups: planta, 24 ## ## Dispersion estimate for gaussian family (sigma^2): 5.42e-05 ## ## Conditional model: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) -0.0210216 0.0043376 -4.846 1.26e-06 *** ## diam 0.0080182 0.0004735 16.935 &lt; 2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 # Gráfico diam.new &lt;- seq(min(celtis$diam, na.rm = TRUE), max(celtis$diam, na.rm = TRUE), length = 5) newdata &lt;- expand.grid(diam.new, celtis$planta, stringsAsFactors = TRUE) colnames(newdata) &lt;- c(&quot;diam&quot;, &quot;planta&quot;) newdata$parche &lt;- substr(newdata$planta, 1, 2) newdata$predy.fixed &lt;- predict(lmm.m2, newdata = newdata, re.form = NA) # poblacional newdata$predy.rand1 &lt;- predict(lmm.m2, newdata = newdata, re.form = NULL) # planta rand2 &lt;- ranef(lmm.m2)$cond$parche rand2.parche &lt;- rand2[match(newdata$parche, rownames(rand2)), 1] a &lt;- fixef(lmm.m2)$cond[1] b &lt;- fixef(lmm.m2)$cond[2] newdata$predy.rand2 &lt;- a + b*newdata$diam + rand2.parche # Efecto planta ggplot(data = celtis, aes(x = diam, y = sem, col = planta)) + geom_point(size = 2) + ggtitle(&quot;Modelo con factores aleatorios anidados&quot;) + geom_line(data = newdata, aes(x = diam, y = predy.rand1)) + geom_line(data = newdata, aes(x = diam, y = predy.fixed), col = &quot;black&quot;, size = 2) + xlab(&quot;Diametro del fruto (mm)&quot;) + ylab(&quot;Masa de semilla (g)&quot;) ## Warning: Removed 1 rows containing missing values (geom_point). # Efecto parche ggplot(data = celtis, aes(x = diam, y = sem, col = parche)) + geom_point(size = 2) + ggtitle(&quot;Modelo con factores aleatorios anidados&quot;) + geom_line(data = newdata, aes(x = diam, y = predy.rand2, col = parche)) + geom_line(data = newdata, aes(x = diam, y = predy.fixed), col = &quot;black&quot;, size = 2) + xlab(&quot;Diametro del fruto (mm)&quot;) + ylab(&quot;Masa de semilla (g)&quot;) ## Warning: Removed 1 rows containing missing values (geom_point). # Tabla resumen tab_model(lmm.m2) sem Predictors Estimates CI p (Intercept) -0.02 -0.03  -0.01 &lt;0.001 diam 0.01 0.01  0.01 &lt;0.001 Random Effects 2 0.00 00 planta:parche 0.00 00 parche 0.00 N planta 24 N parche 4 Observations 616 Marginal R2 / Conditional R2 0.489 / NA # Ecuaciones del modelo lmm.m1 &lt;- lmer(sem ~ diam + (1|planta), data = celtis) lmm.m2 &lt;- lmer(sem ~ diam + (1|parche/planta), data = celtis) extract_eq(lmm.m1) \\[ \\begin{aligned} \\operatorname{sem}_{i} &amp;\\sim N \\left(\\alpha_{j[i]} + \\beta_{1}(\\operatorname{diam}), \\sigma^2 \\right) \\\\ \\alpha_{j} &amp;\\sim N \\left(\\mu_{\\alpha_{j}}, \\sigma^2_{\\alpha_{j}} \\right) \\text{, for planta j = 1,} \\dots \\text{,J} \\end{aligned} \\] extract_eq(lmm.m2) \\[ \\begin{aligned} \\operatorname{sem}_{i} &amp;\\sim N \\left(\\alpha_{j[i],k[i]} + \\beta_{1}(\\operatorname{diam}), \\sigma^2 \\right) \\\\ \\alpha_{j} &amp;\\sim N \\left(\\mu_{\\alpha_{j}}, \\sigma^2_{\\alpha_{j}} \\right) \\text{, for planta:parche j = 1,} \\dots \\text{,J} \\\\ \\alpha_{k} &amp;\\sim N \\left(\\mu_{\\alpha_{k}}, \\sigma^2_{\\alpha_{k}} \\right) \\text{, for parche k = 1,} \\dots \\text{,K} \\end{aligned} \\] 4.5.0.2 Diseño cruzado data(Penicillin) str(Penicillin) ## &#39;data.frame&#39;: 144 obs. of 3 variables: ## $ diameter: num 27 23 26 23 23 21 27 23 26 23 ... ## $ plate : Factor w/ 24 levels &quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,..: 1 1 1 1 1 1 2 2 2 2 ... ## $ sample : Factor w/ 6 levels &quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;,..: 1 2 3 4 5 6 1 2 3 4 ... summary(Penicillin) ## diameter plate sample ## Min. :18.00 a : 6 A:24 ## 1st Qu.:22.00 b : 6 B:24 ## Median :23.00 c : 6 C:24 ## Mean :22.97 d : 6 D:24 ## 3rd Qu.:24.00 e : 6 E:24 ## Max. :27.00 f : 6 F:24 ## (Other):108 table(Penicillin$plate, Penicillin$sample) # Es un diseño cruzado? ## ## A B C D E F ## a 1 1 1 1 1 1 ## b 1 1 1 1 1 1 ## c 1 1 1 1 1 1 ## d 1 1 1 1 1 1 ## e 1 1 1 1 1 1 ## f 1 1 1 1 1 1 ## g 1 1 1 1 1 1 ## h 1 1 1 1 1 1 ## i 1 1 1 1 1 1 ## j 1 1 1 1 1 1 ## k 1 1 1 1 1 1 ## l 1 1 1 1 1 1 ## m 1 1 1 1 1 1 ## n 1 1 1 1 1 1 ## o 1 1 1 1 1 1 ## p 1 1 1 1 1 1 ## q 1 1 1 1 1 1 ## r 1 1 1 1 1 1 ## s 1 1 1 1 1 1 ## t 1 1 1 1 1 1 ## u 1 1 1 1 1 1 ## v 1 1 1 1 1 1 ## w 1 1 1 1 1 1 ## x 1 1 1 1 1 1 lmm.pen &lt;- lmer(diameter ~ 1 + (1|plate) + (1|sample), data = Penicillin) summary(lmm.pen) ## Linear mixed model fit by REML. t-tests use Satterthwaite&#39;s method [&#39;lmerModLmerTest&#39;] ## Formula: diameter ~ 1 + (1 | plate) + (1 | sample) ## Data: Penicillin ## ## REML criterion at convergence: 330.9 ## ## Scaled residuals: ## Min 1Q Median 3Q Max ## -2.07923 -0.67140 0.06292 0.58377 2.97959 ## ## Random effects: ## Groups Name Variance Std.Dev. ## plate (Intercept) 0.7169 0.8467 ## sample (Intercept) 3.7311 1.9316 ## Residual 0.3024 0.5499 ## Number of obs: 144, groups: plate, 24; sample, 6 ## ## Fixed effects: ## Estimate Std. Error df t value Pr(&gt;|t|) ## (Intercept) 22.9722 0.8086 5.4866 28.41 3.62e-07 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 # Tabla resumen tab_model(lmm.pen) diameter Predictors Estimates CI p (Intercept) 22.97 21.37  24.57 &lt;0.001 Random Effects 2 0.30 00 plate 0.72 00 sample 3.73 ICC 0.94 N plate 24 N sample 6 Observations 144 Marginal R2 / Conditional R2 0.000 / 0.936 # Gráfico de efectos aleatorios plot_model(lmm.pen, type = &quot;re&quot;) ## [[1]] ## ## [[2]] 4.6 Modelos mixtos con estructura espacial Palacio et al. (2017) estudiaron el consumo de frutos por aves en \\(Psychotria carthagenensis\\) en un bosque secundario pedemontano de las Yungas (Psychotria_El_Corte_2012.txt). Se quiere analizar si el peso del fruto (x.peso) se relaciona con el número de infrutescencias (n.infrut). library(glmmTMB) psycho &lt;- read.table(&quot;Psychotria_El_Corte_2012.txt&quot;, header = TRUE) hist(psycho$x.diam, xlab = &quot;Diámetro promedio del fruto&quot;, ylab = &quot;Frecuencia&quot;) plot(psycho$x, psycho$y, pch = 19) psycho$pos &lt;- numFactor(psycho$x, psycho$y) psycho$group &lt;- factor(rep(1, nrow(psycho))) lm.no_espacial &lt;- lm(x.diam ~ n.infrut, data = psycho) glmm.espacial &lt;- glmmTMB(x.diam ~ n.infrut + exp(pos + 0|group), family = gaussian, data = psycho) summary(glmm.espacial) ## Family: gaussian ( identity ) ## Formula: x.diam ~ n.infrut + exp(pos + 0 | group) ## Data: psycho ## ## AIC BIC logLik deviance df.resid ## 171.8 183.2 -80.9 161.8 67 ## ## Random effects: ## ## Conditional model: ## Groups Name Variance Std.Dev. Corr ## group pos(3566146.557,7036311.599) 0.4442 0.6665 ## pos(3566158.168,7036313.385) 0.4442 0.6665 0.83 ## pos(3566086.945,7036321.145) 0.4442 0.6665 0.39 0.33 ## pos(3566078.659,7036321.188) 0.4442 0.6665 0.35 0.29 0.88 ## pos(3566083.65,7036324.855) 0.4442 0.6665 0.37 0.31 0.93 0.91 ## pos(3566154.94,7036330.023) 0.4442 0.6665 0.73 0.77 0.35 0.31 0.33 ## pos(3566176.494,7036331.757) 0.4442 0.6665 0.57 0.67 0.25 0.22 0.24 0.72 ## pos(3566082.032,7036332.251) 0.4442 0.6665 0.35 0.30 0.83 0.84 0.89 0.33 ## pos(3566140.074,7036339.335) 0.4442 0.6665 0.64 0.61 0.42 0.37 0.41 0.76 ## pos(3566186.495,7036342.785) 0.4442 0.6665 0.46 0.53 0.21 0.18 0.20 0.59 ## pos(3566171.58,7036342.863) 0.4442 0.6665 0.54 0.61 0.26 0.23 0.25 0.72 ## pos(3566176.562,7036344.684) 0.4442 0.6665 0.50 0.57 0.24 0.21 0.23 0.67 ## pos(3566178.238,7036348.369) 0.4442 0.6665 0.47 0.54 0.23 0.20 0.22 0.63 ## ## ## ## ## ## ## ## ## 0.23 ## 0.56 0.41 ## 0.80 0.20 0.49 ## 0.83 0.25 0.61 0.79 ## 0.82 0.23 0.57 0.86 0.92 ## 0.77 0.22 0.55 0.86 0.88 0.94 ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## [ reached getOption(&quot;max.print&quot;) -- omitted 60 rows ] ## Number of obs: 72, groups: group, 1 ## ## Dispersion estimate for gaussian family (sigma^2): 0.363 ## ## Conditional model: ## Estimate Std. Error z value Pr(&gt;|z|) ## (Intercept) 7.085923 0.344658 20.559 &lt;2e-16 *** ## n.infrut 0.005973 0.005773 1.035 0.301 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 AIC(lm.no_espacial, glmm.espacial) ## df AIC ## lm.no_espacial 3 204.1418 ## glmm.espacial 5 171.8000 4.7 Modelos mixtos con filogenia Lislevand &amp; Thomas (2006) estudiaron la evolución del tamaño del huevo en aves playeras (data(shorebirds)). En particular, nos interesa analizar la relación entre la masa del huevo (Egg.mass) y la masa corporal de la hembra (F.Mass). library(caper) data(shorebird) plot(shorebird.tree) shorebird &lt;- comparative.data(phy = shorebird.tree, data = shorebird.data, names.col = Species, vcv = TRUE) hist(shorebird.data$Egg.Mass) plot(shorebird.data$F.Mass, shorebird.data$Egg.Mass) normal.phyloglmm &lt;- pgls(log(Egg.Mass) ~ F.Mass, data = shorebird) summary(normal.phyloglmm) ## ## Call: ## pgls(formula = log(Egg.Mass) ~ F.Mass, data = shorebird) ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.194516 -0.046257 -0.005145 0.027299 0.166274 ## ## Branch length transformations: ## ## kappa [Fix] : 1.000 ## lambda [Fix] : 1.000 ## delta [Fix] : 1.000 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 2.40680667 0.28666687 8.3958 3.775e-12 *** ## F.Mass 0.00229913 0.00029862 7.6991 7.095e-11 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.06234 on 69 degrees of freedom ## Multiple R-squared: 0.4621, Adjusted R-squared: 0.4543 ## F-statistic: 59.28 on 1 and 69 DF, p-value: 7.095e-11 normal.glm &lt;- glm(log(Egg.Mass) ~ F.Mass, data = shorebird.data) summary(normal.glm) ## ## Call: ## glm(formula = log(Egg.Mass) ~ F.Mass, data = shorebird.data) ## ## Deviance Residuals: ## Min 1Q Median 3Q Max ## -0.89508 -0.25844 0.03603 0.29072 0.68572 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 2.3015653 0.0604762 38.06 &lt;2e-16 *** ## F.Mass 0.0028587 0.0002132 13.41 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## (Dispersion parameter for gaussian family taken to be 0.1339951) ## ## Null deviance: 33.3279 on 70 degrees of freedom ## Residual deviance: 9.2457 on 69 degrees of freedom ## AIC: 62.754 ## ## Number of Fisher Scoring iterations: 2 AIC(normal.phyloglmm, normal.glm) ## df AIC ## normal.phyloglmm 2 20.61397 ## normal.glm 3 62.75396 library(phylolm) shorebird.data$Egg.Mass.binary &lt;- ifelse(shorebird.data$Egg.Mass &gt; 30, 1, 0) plot(shorebird.data$F.Mass, shorebird.data$Egg.Mass.binary) binomial.glm &lt;- phyloglm(Egg.Mass.binary ~ F.Mass, phy = shorebird.tree, data = shorebird.data, method = &quot;logistic_MPLE&quot;, boot = 100, btol = 30) ## Warning in phyloglm(Egg.Mass.binary ~ F.Mass, phy = shorebird.tree, data = shorebird.data, : the boundary of the linear predictor has been reached during the optimization procedure. ## You can increase this bound by increasing &#39;btol&#39;. summary(binomial.glm) ## ## Call: ## phyloglm(formula = Egg.Mass.binary ~ F.Mass, data = shorebird.data, ## phy = shorebird.tree, method = &quot;logistic_MPLE&quot;, btol = 30, ## boot = 100) ## AIC logLik Pen.logLik ## 27.484 -10.742 -5.899 ## ## Method: logistic_MPLE ## Mean tip height: 81.872 ## Parameter estimate(s): ## alpha: 0.01221473 ## bootstrap mean: 0.01221449 (on log scale, then back transformed) ## so possible downward bias. ## bootstrap 95% CI: (0.01221394,0.01221606) ## ## Coefficients: ## Estimate StdErr z.value lowerbootCI upperbootCI p.value ## (Intercept) -7.3788576 2.4647338 -2.9937747 -7.3788784 -7.3788 0.002755 ** ## F.Mass 0.0284749 0.0089727 3.1735091 0.0237665 0.0423 0.001506 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Note: Wald-type p-values for coefficients, conditional on alpha=0.01221473 ## Parametric bootstrap results based on 100 fitted replicates 4.8 Modelos aditivos generalizados mixtos Gillibrand et al. (2007) analizaron la bioluminiscencia pelágica (Sources) a lo largo de un gradiente de profundidad (SampleDepth) en el NE del Océano Atlántico (ISIT.txt). library(ggplot2) library(mgcv) library(itsadug) biolum &lt;- read.table(&quot;ISIT.txt&quot;, header = TRUE) biolum$Station &lt;- as.factor(biolum$Station) biolum$Year &lt;- as.factor(biolum$Year) ggplot(data = biolum, aes(x = SampleDepth, y = Sources)) + geom_point() + facet_wrap(~Station) + theme_bw() ggplot(data = biolum, aes(x = SampleDepth, y = Sources)) + geom_point() + facet_wrap(~Year) + theme_bw() 4.8.1 Ajuste de modelos # Sin efectos aleatorios gam0 &lt;- gam(Sources ~ Year + s(SampleDepth) + s(SampleDepth, by = Year), family = gaussian, data = biolum) layout(matrix(1:3, 1, 3)) plot(gam0) layout(1) # Intercepto aleatorio gamm1 &lt;- gam(Sources ~ Year + s(SampleDepth) + s(Station, bs = &quot;re&quot;), family = gaussian, data = biolum) # Intercepto + pendiente aleatorios gamm2 &lt;- gam(Sources ~ Year + s(SampleDepth) + s(Station, bs = &quot;re&quot;) + # Intercepto aleatorio s(SampleDepth, Station, bs = &quot;re&quot;), # Pendiente aleatoria family = gaussian, data = biolum) # Intercepto + &quot;smooth&quot; aleatorios gamm3 &lt;- gam(Sources ~ Year + s(SampleDepth, Station, bs = &quot;fs&quot;, m = 1, k = 5), # Smooth aleatorio family = gaussian, data = biolum) # Comparación de estructuras de efectos aleatorios AIC(gam0, gamm1, gamm2, gamm3) ## df AIC ## gam0 17.64724 5289.443 ## gamm1 27.86427 5084.019 ## gamm2 42.97891 4914.160 ## gamm3 85.79929 4453.383 summary(gamm2) ## ## Family: gaussian ## Link function: identity ## ## Formula: ## Sources ~ Year + s(SampleDepth) + s(Station, bs = &quot;re&quot;) + s(SampleDepth, ## Station, bs = &quot;re&quot;) ## ## Parametric coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 8.7423 1.4018 6.236 7.49e-10 *** ## Year2002 2.3588 0.8287 2.846 0.00454 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Approximate significance of smooth terms: ## edf Ref.df F p-value ## s(SampleDepth) 8.857 8.992 5.304e+01 &lt; 2e-16 *** ## s(Station) 17.250 17.000 3.501e+03 4.61e-14 *** ## s(SampleDepth,Station) 14.122 18.000 5.927e+10 &lt; 2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Rank: 47/49 ## R-sq.(adj) = 0.796 Deviance explained = 80.6% ## GCV = 29.692 Scale est. = 28.112 n = 789 layout(matrix(1:2, 1, 2)) check_resid(gamm2, split_pred = &quot;Station&quot;, select = 1:2) layout(1) acf_resid(gamm2, split_pred = &quot;Station&quot;) gamtabs(gamm2, type = &quot;HTML&quot;) ## &lt;!-- html table generated in R 4.0.2 by xtable 1.8-4 package --&gt; ## &lt;!-- Wed Apr 27 12:20:56 2022 --&gt; ## &lt;table border=1&gt; ## &lt;caption align=&quot;bottom&quot;&gt; &lt;/caption&gt; ## &lt;tr&gt; &lt;td&gt; A. parametric coefficients &lt;/td&gt; &lt;td align=&quot;right&quot;&gt; Estimate &lt;/td&gt; &lt;td align=&quot;right&quot;&gt; Std. Error &lt;/td&gt; &lt;td align=&quot;right&quot;&gt; t-value &lt;/td&gt; &lt;td align=&quot;right&quot;&gt; p-value &lt;/td&gt; &lt;/tr&gt; ## &lt;tr&gt; &lt;td&gt; (Intercept) &lt;/td&gt; &lt;td align=&quot;right&quot;&gt; 8.7423 &lt;/td&gt; &lt;td align=&quot;right&quot;&gt; 1.4018 &lt;/td&gt; &lt;td align=&quot;right&quot;&gt; 6.2365 &lt;/td&gt; &lt;td align=&quot;right&quot;&gt; &amp;lt; 0.0001 &lt;/td&gt; &lt;/tr&gt; ## &lt;tr&gt; &lt;td&gt; Year2002 &lt;/td&gt; &lt;td align=&quot;right&quot;&gt; 2.3588 &lt;/td&gt; &lt;td align=&quot;right&quot;&gt; 0.8287 &lt;/td&gt; &lt;td align=&quot;right&quot;&gt; 2.8465 &lt;/td&gt; &lt;td align=&quot;right&quot;&gt; 0.0045 &lt;/td&gt; &lt;/tr&gt; ## &lt;tr&gt; &lt;td&gt; B. smooth terms &lt;/td&gt; &lt;td align=&quot;right&quot;&gt; edf &lt;/td&gt; &lt;td align=&quot;right&quot;&gt; Ref.df &lt;/td&gt; &lt;td align=&quot;right&quot;&gt; F-value &lt;/td&gt; &lt;td align=&quot;right&quot;&gt; p-value &lt;/td&gt; &lt;/tr&gt; ## &lt;tr&gt; &lt;td&gt; s(SampleDepth) &lt;/td&gt; &lt;td align=&quot;right&quot;&gt; 8.8572 &lt;/td&gt; &lt;td align=&quot;right&quot;&gt; 8.9925 &lt;/td&gt; &lt;td align=&quot;right&quot;&gt; 53.0434 &lt;/td&gt; &lt;td align=&quot;right&quot;&gt; &amp;lt; 0.0001 &lt;/td&gt; &lt;/tr&gt; ## &lt;tr&gt; &lt;td&gt; s(Station) &lt;/td&gt; &lt;td align=&quot;right&quot;&gt; 17.2500 &lt;/td&gt; &lt;td align=&quot;right&quot;&gt; 17.0000 &lt;/td&gt; &lt;td align=&quot;right&quot;&gt; 3500.5747 &lt;/td&gt; &lt;td align=&quot;right&quot;&gt; &amp;lt; 0.0001 &lt;/td&gt; &lt;/tr&gt; ## &lt;tr&gt; &lt;td&gt; s(SampleDepth,Station) &lt;/td&gt; &lt;td align=&quot;right&quot;&gt; 14.1217 &lt;/td&gt; &lt;td align=&quot;right&quot;&gt; 18.0000 &lt;/td&gt; &lt;td align=&quot;right&quot;&gt; 59270236649.6354 &lt;/td&gt; &lt;td align=&quot;right&quot;&gt; &amp;lt; 0.0001 &lt;/td&gt; &lt;/tr&gt; ## &lt;a name=tab.gam&gt;&lt;/a&gt; ## &lt;/table&gt; 4.8.2 Gráficos # Efectos fijos plot_smooth(gamm2, view = &quot;SampleDepth&quot;, plot_all = &quot;Year&quot;, rm.ranef = TRUE) ## Summary: ## * Year : factor; set to the value(s): 2001, 2002. ## * SampleDepth : numeric predictor; with 30 values ranging from 501.000000 to 4866.000000. ## * Station : factor; set to the value(s): 14. (Might be canceled as random effect, check below.) ## * NOTE : The following random effects columns are canceled: s(Station),s(SampleDepth,Station) ## plot_parametric(gamm2, pred = list(Year = c(&quot;2001&quot;, &quot;2002&quot;)), rm.ranef = TRUE) ## Summary: ## * Year : factor; set to the value(s): 2001, 2002. ## * SampleDepth : numeric predictor; set to the value(s): 1969.5. ## * Station : factor; set to the value(s): 14. (Might be canceled as random effect, check below.) ## * NOTE : The following random effects columns are canceled: s(Station),s(SampleDepth,Station) ## # Efectos aleatorios plot_smooth(gamm2, view = &quot;SampleDepth&quot;, cond = list(Year = &quot;2001&quot;, Station = &quot;3&quot;), col = &quot;red&quot;, ylim = c(-10, 50)) ## Summary: ## * Year : factor; set to the value(s): 2001. ## * SampleDepth : numeric predictor; with 30 values ranging from 501.000000 to 4866.000000. ## * Station : factor; set to the value(s): 3. (Might be canceled as random effect, check below.) ## * NOTE : The following random effects columns are canceled: s(Station),s(SampleDepth,Station) ## plot_smooth(gamm1, view = &quot;SampleDepth&quot;, cond = list(Year = &quot;2001&quot;, Station = &quot;16&quot;), col = &quot;blue&quot;, add = TRUE) # Agregar estación 16 ## Summary: ## * Year : factor; set to the value(s): 2001. ## * SampleDepth : numeric predictor; with 30 values ranging from 501.000000 to 4866.000000. ## * Station : factor; set to the value(s): 16. (Might be canceled as random effect, check below.) ## * NOTE : The following random effects columns are canceled: s(Station) ## 4.8.3 Autocorrelación temporal Aluja et al. (2012) estudiaron los factores que determinan la dinámica poblacional de especies de moscas de la fruta (Tephritidae) durante 11 años en Veracruz, México (Aluja_et_al_Tephritidae.txt). Las variables utilizadas son el (log) número de capturas diarias (FTD) y el sesgo sexual de captura (SBC) de distintas especies del género Anastrepha y los índices de oscilación del Atlántico Norte (NAOI) y Sur (SOI). library(visreg) moscas &lt;- read.table(&quot;Aluja_et_al_Tephritidae.txt&quot;, header = TRUE) str(moscas) ## &#39;data.frame&#39;: 132 obs. of 13 variables: ## $ Date : chr &quot;January_1994&quot; &quot;February_1994&quot; &quot;March_1994&quot; &quot;April_1994&quot; ... ## $ FTD_A_ludens : num 0.1075 0.1637 0 0.4464 0.0222 ... ## $ SBC_A_ludens : num 0.554 0.377 NA 0.563 0.225 0.25 0.448 NA 0.25 0.333 ... ## $ FTD_A_obliqua : num 0.067 0.0692 0.1304 0.1406 1.0201 ... ## $ SBC_A_obliqua : num 0.688 0.639 0.417 0.328 0.273 0.358 0.334 0.556 1 NA ... ## $ FTD_A_serpentina: num 0.0022 0.0201 0.25 0.9643 2.971 ... ## $ SBC_A_serpentina: num 1 0.048 0.269 0.267 0.285 0.333 0.503 0.45 NA NA ... ## $ AP.MZ : num 69 125.4 21.2 73.5 70.8 ... ## $ MAT.MZ : num 15.3 17.4 18.4 22 24.7 ... ## $ AP.JC : num 173.3 4.2 8.6 43 112.5 ... ## $ MAT.JC : num 15.1 17.1 17.6 20.8 22.8 ... ## $ SOI : num -0.5 -0.1 -2.2 -2.9 -1.7 -1.5 -2.9 -3 -3 -2.6 ... ## $ NAOI : num 1 0.5 1.3 1.1 -0.6 1.5 1.3 0.4 -1.3 -1 ... moscas$t &lt;- 1:nrow(moscas) plot(moscas$t, moscas$FTD_A_ludens) gam1 &lt;- gam(FTD_A_ludens ~ s(t, k = 60), family = gaussian, data = moscas) summary(gam1) ## ## Family: gaussian ## Link function: identity ## ## Formula: ## FTD_A_ludens ~ s(t, k = 60) ## ## Parametric coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 0.22251 0.02345 9.488 2.41e-15 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Approximate significance of smooth terms: ## edf Ref.df F p-value ## s(t) 37.69 45.25 3.938 8.95e-11 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## R-sq.(adj) = 0.556 Deviance explained = 68.4% ## GCV = 0.1027 Scale est. = 0.072604 n = 132 gam.check(gam1) ## ## Method: GCV Optimizer: magic ## Smoothing parameter selection converged after 5 iterations. ## The RMS GCV score gradient at convergence was 4.207139e-08 . ## The Hessian was positive definite. ## Model rank = 60 / 60 ## ## Basis dimension (k) checking results. Low p-value (k-index&lt;1) may ## indicate that k is too low, especially if edf is close to k&#39;. ## ## k&#39; edf k-index p-value ## s(t) 59.0 37.7 1.34 1 visreg(fit = gam1, xvar = &quot;t&quot;) acf(resid(gam1)) gamm.ar1 &lt;- gamm(FTD_A_ludens ~ s(t, k = 60), family = gaussian, correlation = corAR1(form = ~ t), data = moscas) summary(gamm.ar1$gam) ## ## Family: gaussian ## Link function: identity ## ## Formula: ## FTD_A_ludens ~ s(t, k = 60) ## ## Parametric coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 0.22017 0.05896 3.734 0.000281 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Approximate significance of smooth terms: ## edf Ref.df F p-value ## s(t) 1 1 0.029 0.865 ## ## R-sq.(adj) = -0.00687 ## Scale est. = 0.16172 n = 132 plot(gamm.ar1$gam) AIC(gam1, gamm.ar1$lme) ## df AIC ## gam1 39.68512 61.98908 ## gamm.ar1$lme 5.00000 109.58570 4.9 Actividades 4.9.0.1 Ejercicio 5.1 Las siguientes variables corresponden a de datos de actividad fotosintética bajo dos concentraciones de nutrientes aplicados a las mismas 10 plantas (la planta 1 se encuentra primera en ambos vectores, la planta 2 se encuentra segunda y así sucesivamente): fotosint_N1 &lt;- c(1.42, 1.4, 1.44, 1.44, 1.42, 1.46, 1.49, 1.5, 1.42, 1.48) fotosint_N2 &lt;- c(1.38, 1.36, 1.47, 1.39, 1.43, 1.41, 1.43, 1.45, 1.36, 1.46) En base al diseño experimental, identifique posibles efectos fijos y aleatorios. Justifique. Considere un modelo adecuado para relacionar el efecto de los tratamientos sobre la actividad fotosintética. Realice un gráfico que muestre los efectos aleatorios, e interprete la varianza del efecto aleatorio y la residual. Utilice un test de t pareado para analizar este conjunto de datos. Compare los parámetros de los efectos fijos estimados de ambos análisis ¿Qué puede concluir? Grafique los individuos vs la tasa fotosintética y distinga cada tratamiento con un color diferente. Conceptualmente y teniendo en cuenta este gráfico, así como el de efectos aleatorios ¿Qué piensa que pasaría si ajustara un modelo mixto de intercepto y pendiente aleatorios a este conjunto de datos? Compruebelo. 4.9.0.2 Ejercicio 5.2 Palacio et al. (2014) realizaron conteos de 44 especies de aves a lo largo de un año en 10 puntos de muestreos (id) localizados en un bosque de ligustro y arbustales circundantes (habitat.type). El set de datos corresponde a abundancia_aves.txt. Analice los factores que se relacionan con la abundancia total de individuos y con las siguientes dos especies: Tordo músico (agebad) y Benteveo (pitsul). Identifique los efectos fijos y aleatorios incluidos en cada modelo. Según el problema de estudio y el modelo especificado ¿A qué tipo de diseño corresponde? En base a los resultados obtenidos ¿Tiene sentido incluir efectos aleatorios? Justifique. ¿Puede hipotetizar algo sobre la distribuciones de probabilidad utilizada para cada especie y para la abundancia total? 4.9.0.3 Ejercicio 5.3 La base de datos ChickWeight (paquete datasets) contiene información sobre el peso (weight) de un grupo de pollos (Chick) versus el tiempo (Time) bajo diferentes dietas (Diet). Grafique la relación peso vs tiempo para cada individuo y dieta. Considere un modelo adecuado en base a la exploración de datos realizada para relacionar el crecimiento bajo distintas dietas. Muestre uno o más gráficos que represente el modelo ajustado. 4.9.1 Ejercicio 5.4 Johnson &amp; Manoukis (2021) analizaron la relación entre el número de capturas de la Broca del Café (Hypothenemus hampei, Curculionidae) y distintas variables climáticas en cafetales de Hawai (https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0257861). El archivo corresponde a Weather_CBB_flight.xls. Los metadatos están en el archivo README_JohnsonManoukisPLoSONE2021.xls. Ajuste un modelo que relacione el número de capturas con variables climáticas. Para esto, construya un modelo saturado y compare primero diferentes estructuras de efectos aleatorios. Luego, realice una selección de modelos considerando diferentes efectos fijos. 4.9.2 Ejercicio 5.5 Price et al. (2015) realizaron conteos de salamandras (count) en cursos de agua en 23 sitios (site) muestreados 4 veces cada uno (sample). En cada curso tomaron las siguientes variables (estandarizadas): minería (mined), cobertura (cover), días desde la última precipitación (DOP), temperatura del agua (Wtemp) y día del año (DOY). La base de datos está disponible en el objeto Salamander del paquete glmmTMB. En base a hipótesis biológicas, construya un modelo que explique la abundancia de salamandras en sitios minados y no minados. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
